[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CodeRen kan je leRen",
    "section": "",
    "text": "Welkom!\nDit is een Quarto¬Æ-document, geschreven voor en door het centrale Data- & Analyse-team van de Vlaamse Gemeenschapscommissie, gericht op leren en documenteren van veelgebruikte R-code.\nAfhankelijk van wie je bent, beste lezer, roepen √©√©n of meerdere elementen in de bovenstaande zin misschien wat vragen bij jou op:\nLees verder voor de antwoorden, maar houdt er rekening mee dat de auteur al eens moeite heeft met bondigheid. üòÅ"
  },
  {
    "objectID": "index.html#wie",
    "href": "index.html#wie",
    "title": "CodeRen kan je leRen",
    "section": "Wie?",
    "text": "Wie?\n\n\nDe Vlaamse Gemeenschapscommissie, of kortweg de VGC, is een overheid in het Brussels Hoofdstedelijk Gewest (BHG) met gemeenschapsbevoegdheden. Dat wil zeggen dat de VGC zich onder andere inzet voor een kwalitatief Nederlandstalig aanbod op het gebied van onderwijs, kinderopvang, cultuur,‚Ä¶\n\n\n\n\n\n\n\n\nBinnen de cel Stedelijk Beleid is er een Data & Analyse deelwerking, die de administratie en het beleid ondersteunt aan de hand van cijfers. Zowel met interne data (die bijvoorbeeld uit een operationeel systeem komt) als met externe data (zoals offici√´le statistieken over het BHG) gaan we aan de slag."
  },
  {
    "objectID": "index.html#wat",
    "href": "index.html#wat",
    "title": "CodeRen kan je leRen",
    "section": "Wat?",
    "text": "Wat?\n\n\n\n\n\n\n\n\nAan de slag gaan met data doen we van begin tot einde vrijwel systematisch met R-code, het onderwerp van dit document. R is zowel een applicatie als een programmeertaal, die vooral in de academische wereld en bij data-wetenschappers populair is. Typisch voor programmeertalen is dat het meeste werk niet gebeurt door met de computermuis in allerhande menu‚Äôs te navigeren en knoppen aan te klikken.\n\n\nWerken in en met R gebeurt hoofdzakelijk door scripts te schrijven, die opgebouwd zijn uit korte of lange ketens van code, die √©√©n voor √©√©n worden uitgevoerd. Zo zijn er specifieke stukjes code die data uit een bestand inladen, data op √©√©n of andere manier bewerken, data visueel voorstellen,‚Ä¶\nEen eenvoudig voorbeeld van dat laatste kan je hieronder zien. Het is ontleend van het boek van Wickham, √áetinkaya-rundel, en Grolemund (2023), dat aan de basis ligt van de structuur van dit document, en bovendien gratis online raadpleegbaar is1.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n    color = \"Species\", shape = \"Species\"\n  ) +\n  scale_color_colorblind()\n\nWanneer je de code probeert te begrijpen, kan je misschien inschatten wat voor soort grafiek ze zou genereren, en over welke gegevens er conclusies zouden getrokken kunnen worden. Ongeacht of je het voorbeeldje nog enigszins leesbaar vindt, wordt meteen duidelijk dat het schrijven van dergelijke code niet vanzelfsprekend is, of toch zeker niet in het begin."
  },
  {
    "objectID": "index.html#waarom",
    "href": "index.html#waarom",
    "title": "CodeRen kan je leRen",
    "section": "Waarom?",
    "text": "Waarom?\nDe drempel om met scripts aan de slag te gaan, kan dus hoog kan zijn. Daartegenover staan tal van voordelen, die het de moeite waard maken om de steile leercurve te overwinnen:\n\nTransparantie: De onderdelen van een script waarin de verwerking van data gebeurt, kan met wat tekstuele toelichting de gebruikte methodologie volledig documenteren.\nEffici√´ntie: Eens een script is geschreven, kan het geheel of gedeeltelijk hergebruikt worden, bijvoorbeeld wanneer er nieuwe data ter beschikking komen.\nFlexibliteit: Er zijn zeer veel bestandsformaten mogelijk, zowel bij het inlezen van data als bij het exporteren van de verwerking daarvan (individuele statische afbeeldingen, uitgebreidere rapporten, interactieve dashboards,‚Ä¶). Daarnaast is er ook veel controle over de manier waarop het ge√´xporteerde materiaal wordt vormgegeven.\nKosteneffectiviteit: De software is gratis.\n‚Ä¶\n\nEen programmeertaal leren is tot op zekere hoogte te vergelijken met het leren van een gewone taal: om via scripts te kunnen praten, zijn heel wat bouwblokken nodig (‚Äúwoordenschat‚Äù) die op een correcte manier gecombineerd moeten worden (‚Äúgrammatica‚Äù) tot een betekenisvol resultaat. Uiteraard zijn er ook verschillen: in een gewone taal zijn veel meer bouwblokken nodig om complexere boodschappen te brengen. Aan de andere kant vergt een programmeertaal veel meer precisie, want de gesprekspartner die onze instructies moet opvolgen, is een computer. Een kleine letter of een hoofdletter, een punt of een liggend streepje, wel of geen aanhalingstekens: elk detail kan het verschil maken tussen code die werkt of niet werkt. Er is met andere woorden wel of totaal geen resultaat, terwijl sprekers die helemaal niet vlot zijn in een gewone taal hun boodschap wellicht nog min of meer overgebracht krijgen.\n\n\n\n\n\nMisschien de meest belangrijke overeenkomst tussen een programmeer- en een gewone taal is de absolute noodzaak van oefenen in re√´le omstandigheden. Voor die ‚Äúpraktijk‚Äù heeft de aspirant-spreker wat ‚Äútheorie‚Äù nodig om op terug te vallen, onder de vorm van woordenlijsten en een grammaticaboek. Dit document beoogt daar de programmeer-versie van te zijn voor Team Data & Analyse. Een codeboek, dat inzoomt op de theorie en praktijkvoorbeelden van specifieke stukjes R-code die binnen het team worden gebruikt, maar ook helpt bij het bewaren van het overzicht.\nIn die zin zijn ervaren gebruikers van R-code eveneens gebaat bij een dergelijk document. Met ervaring neemt de verzameling scripts toe, en wordt het moeilijker om snel een vorig script terug te vinden, waar een bepaald stukje minder frequent gebruikte code wordt toegepast."
  },
  {
    "objectID": "index.html#hoe",
    "href": "index.html#hoe",
    "title": "CodeRen kan je leRen",
    "section": "Hoe?",
    "text": "Hoe?\nEen Quarto-document, dat je momenteel aan het lezen bent! Maar wat is Quarto¬Æ, waarom werd voor een dergelijke format gekozen door Team Data & Analyse, en hoe kan je het raadplegen?\n\n\n\n\n\n\nVrij vertaald van de website, is Quarto¬Æ een open source2 publicatiesysteem voor documenten in verschillende formaten (html, pdf, word, ePub,‚Ä¶) en in verschillende vormen: (wetenschappelijke) artikels, websites, blogs, (online) boeken, slides,‚Ä¶\n\n\n\nEen essentieel kenmerk van een publicatiesysteem zoals Quarto¬Æ, is dat het compatibel is met programmeertalen, waaronder R. Dat betekent dat binnen √©√©n en hetzelfde document zowel stukken tekst als stukken code (met of zonder output) tot √©√©n geheel geintegreerd kunnen worden. Net die mogelijkheid om code met narratieve toelichting te verweven, maakt een dergelijk publicatiesysteem een krachtig instrument, gegeven de doeleinden van Team Data & Analyse, die hierboven werden geschetst.\nEr werd gekozen voor een boekstructuur voor dit document, omdat het toelaat om veel informatie in een overzichtelijke hoofdstrukken-hi√´rarchie te gieten. Indien je een html-versie aan het lezen bent (via een bestand dat jou werd doorgestuurd, ofwel via een webpagina) dan kan je als volgt door het boek navigeren:\n\nAan de linkerkant zie je de globale inhoudstafel, of met andere woorden de inhoudstafel van het volledige document. Momenteel bevind je je in het eerste hoofdstuk ‚ÄúWelkom!‚Äù.\nEveneens aan de linkerkant, maar net boven de globale inhoudstafel, is er een zoekbalk. Deze zoekbalk heeft effect op het volledige boek, en is dus niet beperkt tot de pagina waarop je je bevindt.\nAan de rechtkerkant zie je de lokale inhoudstafel: een overzicht van de (sub)secties waaruit de huidige pagina (en dus het gekozen hoofdstuk) bestaat. Vooral in geval van lange pagina‚Äôs (hoofdstukken) laat dit een snellere navigatie toe.\nHelemaal onderaan elke pagina kan je doorklikken naar het volgende (rechts) of vorige (links) hoofdstuk.\n\n\n\n\n\n\n\n\nBelangrijk\n\n\n\nIndien je het document leest met een hoge zoom, in een venster op een klein deel van uw computerscherm, of op uw smartphone, dan is er minder ruimte voor de lay-out zoals ze hierboven werd geschetst. De globale inhoudstafel en de zoekbalk zijn in die gevallen niet permanent zichtbaar (maar wel op te roepen via knoppen bovenaan). De lokale inhoudstafel valt mogelijk helemaal weg.\n\n\nTot zover het -enigzins lang uitgevallen üòâ- voorwoord van dit Quarto-boek, dat gericht was op een bredere groep lezers. Hierna volgt het meer technische introductie-hoofdstuk, waarin de basis wordt gelegd om effectief van start te gaan met de overige inhoudelijke hoofdstukken. Die inhoudelijke hoofdstukken‚Ä¶\n\n‚Ä¶staan geclusterd in enkele boekdelen, die overeenkomen met de verschillende fases van een typisch data-project.\n‚Ä¶dragen de naam van het code-pakket dat wordt toegelicht in het licht van de betrokken fase.\n‚Ä¶bestaan uit secties die elk gekoppeld zijn aan √©√©n of meer functies uit het pakket.\n\n\n\nKlik je door naar het volgende hoofdstuk? Mooi zo!\nHou alvast het volgende in gedachten: een leertraject, zeker indien het draait rond een complexe activiteit zoals coderen, is lang en heeft etappes met een pittig stijgingspercentage. Koester dus de kleine overwinningen onderweg, eerder dan je blind te staren op de finish.\n\n\n\n\n\n\n\n\n\n\nWickham, Hadley, Mine √áetinkaya-rundel, en Garrett Grolemund. 2023. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 2de dr. O‚ÄôReilly Media. https://r4ds.hadley.nz/.\n\n\nWickham, Hadley, en Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1ste dr. O‚ÄôReilly. https://r4ds.had.co.nz/index.html."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "CodeRen kan je leRen",
    "section": "",
    "text": "Het is de tweede editie van het boek van Wickham en Grolemund (2017), dat aan de basis ligt van de dagelijkse manier van werken van Team Data & Analyse, sinds hun aantreden in april 2021.‚Ü©Ô∏é\n‚ÄúOpen source‚Äù betekent dat het om software gaat waarvan de broncode publiekelijk beschikbaar is: iedereen is dus vrij om de software gratis te gebruiken, aan te passen en verder te verspreiden.‚Ü©Ô∏é"
  },
  {
    "objectID": "part_Introductie.html#r-rstudio-en-packages",
    "href": "part_Introductie.html#r-rstudio-en-packages",
    "title": "Introductie",
    "section": "R, RStudio en packages",
    "text": "R, RStudio en packages\nIn het voorwoord werd al geschreven dat R zowel een applicatie als een programmeertaal is. Dat klopt, al is dat nog niet het hele verhaal: naast de applicatie  is er ook de applicatie ‚ÄúRStudio‚Äù. De tweede is in principe optioneel, maar maakt het leven heel wat makkelijker!\n\n\n\n\n\n\nEen blik op de schermen\nWaar zit het verschil dan juist? Een blik ‚Äúop de schermen‚Äù die typisch bij beide applicaties horen, is vermoedelijk veelzeggend. Eerst kijken we naar de gewone . In dit concrete geval bestaat het scherm uit twee delen: bovenaan een script-bestand, onderaan de console. Doorgaans wordt code geschreven in het script, en nadien met een druk op de knop doorgegeven aan de console. De console voert de code uit en geeft output terug.\n\n\n\n\n\n\n\nRStudio, daarentegen, ziet er heel wat complexer uit. In de meeste gevallen bestaat het uit vier kwadranten (indien een script-bestand geopend is). In onderstaand voorbeeld zijn de kwadranten aan de linkerkant vergelijkbaar met de gewone , terwijl de kwadranten aan de rechterkant volledig nieuw zijn. Die kwadranten aan de rechterkant tonen -in dit geval- de informatie die in het werkgeheugen zit (bovenaan) en het resultaat van het script (onderaan).\nMerk bovendien op dat elk kwadrant ook nog eens uit het verschillende tabbladen bestaat, en er dus met enkele muisklikken heel wat extra informatie in √©√©n venster raadpleegbaar is. De kern van het (schrijf)werk blijft gebeuren aan de hand van scripts (linksboven) om in interactie te gaan met de console of terminal (linksonder), terwijl alle overige informatie gericht is op het faciliteren van dat werk. In die zin is RStudio een ‚ÄúIntegrated Development Environment‚Äù of IDE, waar de gewone  slechts √©√©n -zij het een fundamenteel- onderdeel van vormt.\n\n\n\n\n\n\n\nAangezien  onderdeel is van RStudio, moeten beide applicaties gedownload en ge√Ønstalleerd worden. Hoewel wij, de gebruikers, enkel aan de slag gaan met/in RStudio, spreekt RStudio ‚Äúachter de schermen‚Äù  aan voor het uitvoeren van de code. Een analogie van Ismay en Kim (2019) die wel eens wordt gebruikt, is die van een auto:  is de motor, maar het is in combinatie met allerhande hulpsystemen van RStudio (zoals spiegels, het navigatiesysteem en de snelheidsmeter van de auto) dat de chauffeur vlot op zijn/haar bestemming geraakt.\n\n\n\n\n\n\nTip\n\n\n\n\n\nZie https://posit.co/download/rstudio-desktop/ voor instructies en links naar de downloadpagina‚Äôs van de software. Installeer eerst  en pas nadien RStudio.\n\n\n\n\n\nExtra functies in de bibliotheek\nEens zowel  en RStudio ge√Ønstalleerd staan, ben je dan vertrekkensklaar? Nog niet helemaal‚Ä¶ Er zijn immers ook nog enkele ‚Äúpackages‚Äù te installeren. Een package of ‚Äúcode-pakket‚Äù omvat bijkomende functies, die niet standaard deel uitmaken van , maar door de community van gebruikers werden ontwikkeld1. Het installeren (en up-to-date houden) van een package kan je via de RStudio interface2 doen, ofwel kan je de console gebruiken. Bijvoorbeeld:\n\n1install.packages(\"tidyverse\")\n\n2update.packages(c(\"readxl\", \"writexl\", \"sf\"))\n\n\n1\n\nVia install.packages wordt een package gedownload en ge√Ønstalleerd. Merk op dat de package-naam met aanhalingstekens genoteerd staat.\n\n2\n\nHet update.packages laat toe om een specifiek package up-to-date te brengen. Het is bovendien mogelijk om voor meerdere packages tegelijkertijd te vragen om het update-proces (maar ook het installatie-proces) door te voeren. In dat geval dienen we de reeks af te bakenen door middel van c(). De ‚Äúc‚Äù staat voor ‚Äúconcatentate‚Äù, of -in het Nederlands- ‚Äúconcateneren‚Äù.\n\n\n\n\nHet installatieproces van een package dient in principe slechts √©√©n keer te gebeuren: door het doorlopen van het proces, worden de nodige bestanden aangemaakt op de lokale schijf van de computer, en die blijven daar ook staan, tenzij remove.packages() wordt gebruikt. Wat er wel elke keer dient te gebeuren bij een nieuwe sessie (dus wanneer RStudio, of de computer als geheel, afgesloten is geweest), is het laden van de packages die voor die sessie nodig zijn. Welke packages nodig zijn, hangt dan weer af van de extra functies die in het script worden gebruikt.\n\n\n\n\n\n\nTip\n\n\n\n\n\nWerk rechtstreeks in de console (in plaats van in het script-bestand) voor het installeren/updaten van packages. Wanneer functies als install.packages() ergens in het script staan, worden die processen immers nodeloos herhaald telkens wanneer je een script laat lopen.\n\n\n\nHet verschil tussen de installatie en het inladen van packages kunnen we verduidelijken aan de hand van de vergelijking met een fysieke bibliotheek. Het installeren van een package, is als het aankopen van een nieuw boek, dat ergens in de bibliotheek een plaatsje in een rek krijgt. Om de inhoud van het boek te gebruiken, dien je het echter uit het rek te halen, eventueel mee te nemen naar een tafeltje waar je aan het werk bent, en het open te slaan. Die stappen van het gaan halen van een boek om bepaalde passages te kunnen raadplegen, is een analogie voor het laden van een package. Aan het einde van de werksessie in de bibliotheek, belanden de boeken uiteindelijk weer allemaal op het rek, tot ze opnieuw nodig zijn. Om vlot te werken, is het ook aangewezen om de tafel niet te overladen met boeken (packages), waarvan je niet zeker weet of je de inhoud (functies) wel nodig hebt. Af ten toe is het ook goed om van de boeken (packages) eens nieuwe edities in het rek te laten zetten (updaten), zeker wanneer de boeken naar elkaars inhoud verwijzen, en dus afhankelijk zijn van elkaar (dependencies).\nMaar hoe doe je dat dan, een package van het spreekwoordelijke rek halen? Hoewel dat logisch zou zijn, is het niet ‚Äúload.packages()‚Äù, maar wel:\n\n1library(tidyverse)\n\n2library(readxl)\nlibrary(writexl)\nlibrary(sf)\n\n\n1\n\nMerk op dat in dit geval de naam van het package zonder aanhalingstekens mag genoteerd worden.\n\n2\n\nWanneer meerdere packages nodig zijn, wat vaak het geval is, kan je deze niet in √©√©n library()-commando stoppen!\n\n\n\n\n\n\nHet dubbel dubbelpunt\nIs het laden van een volledig package via library() de enige manier om een specifieke functie op te roepen? Neen! Het is mogelijk om in een code-ketting een bepaalde functie te laten voorafgaan door de package-naam en ::. Bijvoorbeeld:\n\n1library(readxl)\n\nIngeladenData &lt;- read_xlsx(\"VoorbeeldVanEenBestand.xlsx\")\n\n# Of: \n\n2IngeladenData &lt;- readxl::read_xlsx(\"VoorbeeldVanEenBestand.xlsx\")\n\n\n1\n\nGangbare manier van werken: het package laden, zodat nadien de extra functies rechtstreeks aangesproken kunnen worden.\n\n2\n\nAlternatieve manier van werken: het package niet laden, en bij elk gebruik van een extra functie moeten specificeren wat het ruimere package is.\n\n\n\n\nWerken aan de hand van &lt;package&gt;::&lt;functie&gt; in de analogie van de bibliotheek: het boek wordt niet op de werktafel gelegd, maar je vraagt iemand om naar het rek te gaan om een passage over een bepaald onderwerp te citeren. De persoon in kwestie zal dan de instructie moeten krijgen in welk boek (package) die passage te vinden is. Door de band genomen is het handiger om het package gewoon te laden van zodra je het nodig hebt (library()), maar desgewenst is het dus mogelijk om dat niet te doen, bijvoorbeeld wanneer het om een package gaat waarvan je √©√©n functie op √©√©n plaats in het script gebruikt, en je verder geen verwarring wil hebben met andere functies in dat package. Of met andere woorden: de passage is maar √©√©n keer nodig, moeten we het boek dan uit het rek halen?\nEen andere situatie om &lt;package&gt;::&lt;functie&gt; te gebruiken, is het scenario dat er twee of meer packages geladen zijn, die functies hebben met dezelfde naam. In onze analogie liggen er dus twee of meer boeken op de werktafel, die gelijkaardige passages bevatten. Wanneer die dubbelzinnige functienaam wordt gebruikt als onderdeel van de code, ontstaat er dus ambigu√Øteit voor de menselijke schrijver (en lezer) van het script, die kan worden opgelost door vermelding van het ruimere package. Merk op dat er voor de computer g√©√©n ambigu√Øteit is: de variant van het laatst geladen package wordt genomen, hoewel dat niet noodzakelijk de bedoeling van de schrijver is3.\n\n\n\n\n\n\nTip\n\n\n\n\n\nPlaats alle library()-code bovenaan het script, zodat de lezer meteen kan zien welke packages ge√Ønstalleerd dienen te worden. Voor het geval functies worden gebruikt zonder dat het package als geheel wordt geladen, kan het om die reden handig zijn om het package toch bovenaan te vermelden, maar dan voorafgegaan door een #. Lijnen die worden voorafgegaan door een # worden immers niet als code ge√Ønterpreteerd door , en kunnen bijgevolg worden gebruikt om notities te maken.\n\n\n\nAls de applicaties ( en RStudio), en eventueel wat extra packages, werden gedownload en ge√Ønstalleerd, zijn we dan klaar om in data te duiken? Bijna. We moeten RStudio immers de weg wijzen naar de plaats op de computer waar (onderdelen van) het script uitgevoerd moeten worden (met name wanneer er sprake is van input of output). Om de analogie van de fysieke bibliotheek helemaal rond te maken, kunnen we het tafeltje, waar we enkele boeken samenbrengen om ons te helpen bij ons werk, linken aan de ‚Äúworking directory‚Äù of werkruimte. Het gaat dan meer bepaald over het aanduiden van een specifieke locatie (beschreven in het bestand-pad, bijvoorbeeld: ‚ÄúC:/Users/jouwgebruikersnaam/documents‚Äù), waar de werktafel (map op de computer) zich bevindt."
  },
  {
    "objectID": "part_Introductie.html#de-werkruimte-gebruiken",
    "href": "part_Introductie.html#de-werkruimte-gebruiken",
    "title": "Introductie",
    "section": "De werkruimte gebruiken",
    "text": "De werkruimte gebruiken\nWerken met RStudio betekent in de meeste gevallen dat er informatie (vooral gestructureerde data), wordt ge√Ømporteerd en verwerkt, om vervolgens √©√©n of ander product (een opgeschoond en verrijkt excel-bestand, een afbeelding van een grafiek, een ge√Øntegreerd rapport in html-formaat,‚Ä¶) te exporteren.\nHet meest eenvoudige scenario voor het gebruiken van RStudio in het kader van een specifieke analyse, is het centraliseren van alle input en output in (een sub-map van) de map waar ook √©√©n of meerdere scripts zitten, die de verwerking uitvoeren (van import tot export). Er is in RStudio voor dat scenario ook functionaliteit voorzien om die map expliciet als (basis van een) project aan te duiden, waardoor die automatisch als de werkruimte wordt beschouwd4. Wanneer er data moet worden ingelezen, of een product moet worden ge√´xporteerd, hoeft de data-analist zich dus enkel zorgen te maken over het aanduiden van de juiste sub-mappen binnen de projectmap. Met andere woorden: de context buiten de projectmap, onder andere de locatie van de map op de computer van de data-analist, is niet langer relevant. Het voordeel is dat een projectmap als geheel kan uitgewisseld worden, zonder dat de links in de scripts naar import-bestanden en export-locaties gebroken wordt. Het nadeel is dat alles dat buiten de projectmap ligt ook niet toegankelijk is. Helaas betekent dat ook meteen dat het niet compatibel is met de huidige manier van (samen)werken van Team Data & Analyse.\n\nDe organisatie van SharePoint\nVanuit technisch oogpunt is de werking van Team Data & Analyse ingebed in SharePoint (cf.¬†onderstaande afbeelding), terwijl er vanuit organisatorisch oogpunt voornamelijk projectmatig wordt gewerkt, waar er uitgewisseld wordt met collega‚Äôs van buiten de cel Stedelijk Beleid. In de praktijk wordt voor iedere duidelijk afgelijnde vraag een nieuwe projectmap aangemaakt, waar de nodige data voor dat project zoveel als mogelijk wordt verzameld, samen met de scripts en de output die wordt gegenereerd.\n\n\nEchter: voor heel wat vragen is er aanvullend op de informatie in de projectmap ook informatie nodig die elders op Sharepoint moet staan. Twee typische voorbeelden van die informatie zijn:\n\nCartografische gegevens (meestal shapefiles)\n\nDeze gegevens zijn nodig telkens wanneer kaarten deel uitmaken van de gevraagde output. Momenteel worden verschillende cartografische gegevens, relevante documentatie en links naar bronnen in een eigen bibliotheek bijgehouden. Indien de projectmappen ook vanuit RStudio als project zouden behandeld moeten worden, dan zouden we genoodzaakt zijn om delen van de cartografische gegevens voor iedere vraag opnieuw te kopi√´ren. Dat zou nodeloos gebruik van het geheugen zijn5, maar ook van tijd: indien een nieuwe versie van de cartografische gegevens wordt gedownload, zou dit ook opnieuw naar alle (lopende) projecten moeten worden gekopieerd!\n\nGevoelige gegevens van andere diensten\n\nDeze gegevens worden ook ondergebracht in een aparte bibliotheek, waar een veel beperktere groep collega‚Äôs standaard toegang toe heeft (enkel Team Data & Analyse, eerder dan de cel Stedelijk Beleid als geheel). Binnen de bibliotheek worden aparte mappen aangemaakt, waar heel gericht extra toegangen worden gegeven aan collega‚Äôs verantwoordelijk voor de gevoelige gegevens, zodat zij daar een kopie voor analyse kunnen voorzien. Per definitie gaat het om informatie die in de originele versie niet naar een projectmap mag gekopieerd worden, maar wel in verwerkte(re) versie gebruikt moet kunnen worden in projecten. Door ons in de projectmappen niet te beperken tot data binnen die map, kunnen we dus veel flexibeler aan het werk in de scripts, en blijft alle verwerking nodig voor een project, ook van de gevoelige data elders, binnen de projectmap staan6.\n\n\nOneDrive en de verkenner\nHoe krijgen we data van SharePoint ingeladen in RStudio, dat lokaal op de harde schijf van de computer draait? Er zijn allicht meerdere mogelijkheden, maar de meest gemakkelijke is het synchroniseren van Sharepoint-bibliotheken naar de OneDrive. Dat wil zeggen dat de (project)mappen via de verkenner kunnen geopend worden, en dat ze ook een bestand-pad hebben dat we als werkruimte kunnen aanduiden in het script.\n\n\n\n\n\n\n\nHet voordeel is dat (wijzigingen in) de producten van de verwerking (zoals een afbeelding met een kaart of grafiek) onmiddellijk beschikbaar zijn voor alle collega‚Äôs die tot de projectmap toegang hebben (gekregen). Het daaraan gekoppelde nadeel is dat diezelfde collega‚Äôs wijzigingen kunnen aanbrengen in de data (niet zelden excel-bestanden), die repercussies kunnen hebben op de scripts.\n\n\nEen ander voordeel is dat collega‚Äôs die met (een kopie van) het script aan de slag willen gaan, slechts minimale wijzigingen moeten doen aan de code voor het aanduiden van de werkruimte, indien ze op dezelfde wijze de SharePoint-bibliotheken synchroniseren met hun OneDrive. De stukjes script in de volgende sectie maken dit heel concreet.\n\n\n\n\n\n\n\n\nBelangrijk\n\n\n\nMerk op dat deze documentatie gebruikt maakt van code-annotatie, via omcirkelde getallen die aan de rechterkant van een blokje code kunnen staan. Indien je met de computermuis ter hoogte van zo‚Äôn getal stil blijft staan, verschijnt wat extra tekst in een pop-up (vergelijkbaar met een voetnoot), die een onderdeel van de code toelicht. De specifieke lijnen code in het deel dat wordt toegelicht, worden bovendien ook gemarkeerd. Op die manier is er detail voor wie het nodig heeft, zonder dat het ruimte in beslag neemt.\n\n\n\n\n\nVan map naar werkruimte\n\n1user &lt;- \"nvdber\"\n\n2setwd(\n3  stringr::str_c(\n    \"C:/Users/\",\n    user, \n     \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \",\n    \"D&A Cartografische gegevens\"\n    )\n  )\n\n\n1\n\nEerst en vooral maken we een object met de naam ‚Äúuser‚Äù aan, dat √©√©n waarde bevat: de gebruikersnaam van de persoon die op dat moment aan de slag wil met het script. Voor de auteur van deze documentatie is dat ‚Äúnvdber‚Äù.\n\n2\n\nMet setwd() kunnen we via de console de Working Directory (werkruimte) aanduiden. Het argument is een string (een reeks karakters afgebakend met aanhalingstekens), die het pad naar de map omschrijft.\n\n3\n\nMet str_c() (uit het stringr-package) worden meerdere argumenten (opgesomd via komma‚Äôs) tot √©√©n string gecombineerd. Merk op dat die argumenten een expliciete string kunnen zijn, maar ook een string die achter een object zit, zoals user! Dat wil zeggen dat voor het gecombineerde resultaat niet ‚Äúuser‚Äù gaat genomen worden, maar de waarde die we de naam ‚Äúuser‚Äù hebben gegeven, namelijk ‚Äúnvdber‚Äù.\n\n\n\n\nDe kern van deze manier van werken, is dat er voor gedeelde mappen die als werkruimte worden gebruikt in principe niets aan het pad moet veranderd worden, met uitzondering van de gebruikersnaam (tenzij de mappenstructuur wordt hernoemd, verplaatst of op een andere manier gewijzigd). Voor het gemak wordt het user-object dus ergens bovenaan het script gedefinieerd (ten laatste onmiddellijk na het laden van de packages), zodat de gebruiker het meteen ziet en het indien nodig kan aanpassen naar zijn/haar eigen gebruikersnaam.\nNaast setwd(), met als argument het pad naar de map die als werkruimte dient opgevat te worden, is er ook getwd(), zonder verdere argumenten: hiermee wordt het pad naar de huidige werkruimte via de console getoond (in plaats van gewijzigd). De map die laatst werd aangeduid als werkruimte, en alle inhoud, kan integraal binnen RStudio worden geraadpleegd via het tabblad ‚ÄúFiles‚Äù in het kwadrant rechts onderaan. Via het tandwiel in dat tabblad kan de werkruimte ook worden gewijzigd, maar dat wordt ten stelligste afgeraden, aangezien het dan verborgen blijft voor het script (en dus ook voor collega‚Äôs die van het script gebruik wensen te maken).\nDe lengte van het pad naar de werkruimte valt in bovenstaand geval nog relatief mee, maar dat hoeft natuurlijk niet altijd zo te zijn, zeker wanneer om welke reden dan ook aan de slag wordt gegaan met een werkruimte die ergens diep in een mappenstructuur zit7. In die gevallen is het goed om weten dat het pad via de verkenner kan gekopieerd worden (cf.¬†onderstaande afbeelding), maar dat er dan wel op twee zaken moet worden gelet:\n\nDe schuine strepen staan in de verkenner (‚Äú\\‚Äù) anders dan in -scripts (‚Äú/‚Äù), en moeten dus vervangen worden.\nOnderdelen van het pad moeten mogelijks nog geparametriseerd worden (cf.¬†supra: werken met een user-object).\n\n\n\n\n\n\n\n\n\nOp dezelfde manier zou ook aan de slag kunnen worden gegaan met parameters voor de projectmap of de map met gevoelige data van andere diensten. Dat is niet strikt noodzakelijk, in die zin dat het geen impact heeft op het al dan niet werken van √©√©n script bij verschillende collega‚Äôs. Echter: het maakt wel meteen (bovenaan in het script) duidelijk welke specifieke mappen allemaal betrokken zijn in het script. Een bijkomend voordeel is dat er maar op √©√©n plaats moet gecorrigeerd worden, indien de naam van de map zou gewijzigd worden.\n\nproject &lt;- \"naam van de projectmap\"\ngevoeligedata &lt;- \"naam van de map met gevoelige data\"\n\nsetwd(\n  stringr::str_c(\n    \"C:/Users/\", \n    user, \n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \", \n    \"D&A Projecten/\",\n    project\n    )\n  )\n\nsetwd(\n  stringr::str_c(\n    \"C:/Users/\",\n    user,\n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \",\n    \"Gevoelige data andere diensten/\",\n    gevoeligedata\n    )\n  )\n\n\n\nOrdelijke projectmappen\nHet kan geen kwaad om op voorhand goed na te denken over een ordelijke structuur van de projectmap, waar doorgaans de meeste bestanden gecentraliseerd zullen staan, aangezien dat gevolgen heeft voor het inlezen van de data. Een ordelijke structuur zit minimaal in de naamgeving, zoals in geval van de (hypothetische) projectmap A op onderstaande afbeelding. Dit is het meest eenvoudige scenario, typisch in gevallen waar de hoeveelheid input en output eerder beperkt is, en er naast Team Data & Analyse weinig of geen collega‚Äôs in de map aan de slag gaan. Omvat de analyse heel veel data- en/of output-bestanden kan omvatten, kan het handig zijn om met √©√©n submap-niveau te beginnen werken, zoals in projectmap B. Gaan heel veel collega‚Äôs actief aan de slag in de projectmap, dan kan het veiliger zijn om al het analysewerk van Team Data & Analyse in een aparte map te plaatsen, om voor een zekere afscheiding8 te zorgen van het vele andere materiaal dat in de map op het hoogste niveau kan zitten (cf.¬†projectmap C).\nBinnen projectmap C zou er nog een verdere opdeling in submappen mogelijk zijn volgens hetzelfde principe als in projectmap B, en misschien kan je nog andere varianten bedenken. Hoe er precies moet worden gestructureerd is tot op zekere hoogte een kwestie van persoonlijke voorkeur. Dat er een structuur is, is dus cruciaal, eerder dan wat die structuur precies inhoudt. Los van de structuur, is het aangewezen om een zekere consistentie te proberen hebben over projecten heen, aangezien dat voor alle betrokkenen sneller werkt.\n\n\nHoe vertalen bovenstaande scenario‚Äôs zich dan naar het aanduiden met de werkruimte? In de regel wordt best eenvoudigweg de projectmap z√©lf genomen. In scenario A is er niet echt een alternatief, en in scenario C maakt het weinig verschil of er voor de projectmap zelf of voor de ANALYSE-submap wordt gekozen (want alle bestanden delen nog steeds dezelfde map). In scenario B daarentegen, zou de de analist kunnen overwegen om de werkruimte eerst toe te kennen aan de submap ‚ÄúDATA‚Äù, en na de verwerking aan de submap ‚ÄúOUTPUT‚Äù. We maken beiden manieren hieronder concreet, aan de hand van (fictieve) stukken script:\n\n1user &lt;- \"nvdber\"\nproject &lt;- \"B\"\n\n# Aangewezen manier van werken:\n\n2setwd(\n  stringr::str_c(\n    \"C:/Users/\", \n    user, \n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \", \n    \"D&A Projecten/\",\n    project,\n    )\n  )\n\n3dataset1 &lt;- readxl::read_xlsx(\"DATA/DATA_naamdataset1.xlsx\")\n\n4writexl::write_xlsx(Dataset1_verwerkt, \"OUTPUT/EXPORT_Verrijktedata.xlsx\")\n\n# Alternatieve manier van werken: \n\n5setwd(\n  stringr::str_c(\n    \"C:/Users/\", \n    user, \n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \", \n    \"D&A Projecten/\",\n    project,\n    \"DATA\")\n  ) \n\ndataset1 &lt;- readxl::read_xlsx(\"DATA_naamdataset1.xlsx\")\n\n6setwd(\n  stringr::str_c(\n    \"C:/Users/\", \n    user, \n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \", \n    \"D&A Projecten/\",\n    project,\n    \"OUTPUT\")\n  ) \n\nwritexl::write_xlsx(dataset1_verwerkt, \"EXPORT_Verrijktedata.xlsx\")\n\n\n1\n\nHet defini√´ren van de objecten die deel uitmaken van de het pad (cf.¬†vorige codeblokken).\n\n2\n\nHet toewijzen van de werkruimte aan de projectmap met de naam ‚ÄúB‚Äù door middel van setwd(), waarbinnen str_c() wordt gehanteerd om het pad naar de projectmap op de bouwen (cf.¬†vorige codeblokken).\n\n3\n\nHet inlezen van een databestand met read_xlsx(), dat deel uitmaakt van het readxl-package. De details over deze functie volgen verderop in de documentatie. Voor nu is het voldoende om te weten dat het mee zorgt voor het aanmaken van een nieuw object in het werkgeheugen (dataset1) dat de gegevens uit het ingelezen excel-bestand omvat.\n\n4\n\nHet exporteren van een databestand met write_xlsx(), dat deel uitmaakt van het writexl-package. De details over deze functie volgen verderop in de documentatie. Voor nu is het voldoende om te weten dat het zorgt voor het aanmaken van een nieuw excel-bestand in de projectmap, met als inhoud een object uit het werkgeheugen (dataset1_verwerkt), die het resultaat is van een reeks acties op de ingelezen data.\n\n5\n\nHier leggen we de werkruimte √©√©n niveau lager dan in de aangewezen manier van werken (‚ÄúDATA‚Äù is achteraan de toegevoegd), waardoor we de submap niet meer moeten (zelfs niet meer mogen) vermelden in de readxl()-functie.\n\n6\n\nOmdat we naar een andere submap willen schrijven, zijn we genoodzaakt om de werkruimte te veranderen, aangezien het niet mogelijk is om via de write_xlsx()-functie ‚Äúeen stap terug naar boven te zetten‚Äù in de mappenstructuur.\n\n\n\n\nHoewel het technisch perfect mogelijk is om flexibel te wisselen van werkruimte, is het aangewezen om dat zoveel mogelijk tot een minimum te beperken, aangezien het de kans verhoogt dat er ergens in √©√©n van de paden iets verkeerd loopt. Nog beter is om wijzigingen in de werkruimte allemaal in een vroeg punt in het script te doen, in een daaraan toegewijde sectie. Op die manier wordt het script in het algemeen meer leesbaar, en in het bijzonder wordt de redenering achter de toewijzing van werkruimte aan verschillende mappen ook sneller duidelijk.\n\n\nOrdelijke scripts: een aanzet\nOm dit onderdeel af te sluiten, geven we hieronder een helder gestructureerde aanzet voor scripts met lokale data, rekening houdend met de manier van (samen)werken van Team Data & Analyse.\n\n1# Titel van de analyse\n\n2# Packages laden ####\n\n3library(readxl)\nlibrary(tidyverse)\nlibrary(writexl)\n\n4# Gebruiker en andere parameters defini√´ren ####\n\nuser &lt;- \"nvdber\"\nproject &lt;- \"NaamProjectmap\"\ngevoeligedata &lt;- \"NaamGevoeligeDatamap\"\n\n5# Lokaal opgeslagen data inlezen ####\n\nsetwd(\n  str_c(\n    \"C:/Users/\",\n    user,\n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \",\n    \"Gevoelige data andere diensten/\",\n    gevoeligedata\n    )\n  )\n\nDatasetA_Gevoelig &lt;- read_xlsx(\"GevoeligeData.xlsx\")\n\nsetwd(\n  str_c(\n    \"C:/Users/\", \n    user, \n    \"/Vlaamse Gemeenschapscommissie/\",\n    \"DLA - Stedelijk Beleid & Data en Analyse - \", \n    \"D&A Projecten/\",\n    project,\n    )\n  )\n\nDatasetB &lt;- read_xlsx(\"NaamProjectdata1.xslx\")\nDatasetC &lt;- read_xlsx(\"NaamProjectdata2.xslx\")\n\n6# ... ####\n\n\n1\n\nCodelijnen die niet worden ge√Ønterpreteerd wanneer het script draait (omdat ze voorafgegaan worden door een #), zijn niet alleen handig voor kleine notities tussendoor, maar ook voor een algemene titel bovenaan het script!\n\n2\n\nCodelijnen die voorafgegaan worden door minstens √©√©n # √©n afgesloten worden met minstens vier keer een # (zonder spaties), worden als de titel van een sectie ge√Ønterpreteerd. Secties van een script kunnen open- en dichtgeklapt worden, wat in geval van veel lijnen code kan helpen om de weg te blijven vinden.\n\n3\n\nHet laden van (enkel) de benodigde packages, is meestal het eerste √©chte stuk code in het script. Door het (quasi) helemaal bovenaan te plaatsen, wordt voor andere gebruikers van het script meteen duidelijk welke packages eventueel nog ge√Ønstalleerd moeten worden. Merk bovendien op dat we door het laden van het readxl-package niet meer genoodzaakt zijn om vederop de read_xlsx()-functie te laten voorafgaan door readxl::. Hetzelfde geldt voor stringr:: bij str_c(), door het laden van de tidyverse (zie verder).\n\n4\n\nParameters defini√´ren, onder andere voor gebruik in de paden voor de werkruimte (cf.¬†eerdere codeblokken).\n\n5\n\nWerkruimte toekennen en data inladen. Het is handig om eerst de werkruimte toe te kennen aan de map of mappen die buiten de projectmap liggen (cf.¬†supra: cartografische en/of gevoelige datasets), en te eindigen met de projectmap (eventueel om ook van daar data in te kunnen lezen). Op die manier hoeven we na deze sectie de werkruimte niet meer te wijzigen, aangezien de projectmap quasi altijd ook de map is waar output wordt opgeslagen.\n\n6\n\nNa het inlezen van alle data, kunnen de volgende secties gewijd worden aan de effectieve verwerking van de ingelezen data, wat zich eventueel ook vertaald in data-visualisatie en het exporteren van bestanden. Voor de verwerking en visualisatie vormt de tidyverse een cruciale package-reeks, die we hieronder inleiden."
  },
  {
    "objectID": "part_Introductie.html#tidyverse-leesbare-code",
    "href": "part_Introductie.html#tidyverse-leesbare-code",
    "title": "Introductie",
    "section": "Tidyverse: leesbare code",
    "text": "Tidyverse: leesbare code\n‚ÄúTidyverse‚Äù is de naam van een verzameling packages, die allen gemeenschappelijke principes delen, op hoe ‚Äútidy‚Äù of nette data eruit ziet, hoe functies en ruimere code opgebouwd wordt, en welke datastructuren daarvoor gehanteerd worden. De packages, en met name de functies die ze toevoegen, worden dus niet louter en alleen in een vacu√ºm geschreven om een specifiek praktisch probleem op te lossen: ze dienen ook te passen binnen een ruimere data-filosofie. Op die manier kan de community samenwerken om te bouwen aan een samenhangend package-universum.\n\nDe tidyverse zorgde voor een ware revolutie voor data-analisten, aangezien hun workflow sterk vereenvoudigd werd. Na verloop van tijd kon de tidyverse tegemoet komen aan alle aspecten van hun data-werkzaamheden, aan de hand van packages die technisch compatibel zijn, alsook consistent wat betreft de achterliggende visie. Het is net die visie op wat ‚Äútidy‚Äù data is, en op de ‚Äúwerkwoorden‚Äù en ‚Äúgrammatica‚Äù die nodig zijn om met data aan de slag te gaan, die uitmondt in code die niet alleen leesbaar is voor computers, maar ook voor mensen9.\n\nTidyverse core-packages\nZoals we in een vorige sectie reeds zagen, kunnen we de tidyverse-packages eenvoudigweg laden door middel van de library()-functie, en dit aan het begin van elke nieuwe sessie.\n\n\n\n\n\n\nBelangrijk\n\n\n\nTot nu toe werden de code-blokken in deze documentatie niet gevolgd door output, ofwel omdat ze geen output hadden, ofwel omdat de code in het blok niet werd uitgevoerd. Vanaf nu zal er w√©l output worden getoond, onmiddellijk na code die de output heeft gegeneerd.\n\n\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nDe output bij het laden van de tidyverse, geeft ons meer informatie over de tidyverse-versie, en de zogenaamde ‚Äúcore-packages‚Äù die automatisch mee worden geladen (met ook telkens hun versie-nummering). Deze reeks van packages worden beschouwd als de instrumenten van de gereedschapskist die je bij de meeste opdrachten nodig hebt. Het is echter belangrijk op te merken dat er buiten deze centrale packages, die geladen worden met library(tidyverse) nog heel wat andere packages zijn, die ook de tidyverse-principes volgen.\nHieronder lichten we de doelstelling van de deze centrale packages kort toe, opdat we het geheel (de tidyverse), wat m√©√©r is dan de som van de delen, beter kunnen duiden. Meer details (en met name specifieke functies) zijn verderop in de documentatie te vinden.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHet doel van readr10 is het vlot inlezen van data, die is opgebouwd als een vierkant van kolommen en rijen, en opgeslagen staat onder de vorm van een aantal veel voorkomende bestandsformaten. Enkele voorbeelden zijn formaten waarin de waarden van elkaar gescheiden worden door tabs (zoals excel-bestanden), of (punt)komma‚Äôs (csv-bestanden).\n\n\n\n\nTabellen in de tidyverse worden tibbles11 genoemd. De precieze verschillen met andere dataframe-structuren, is zeer technisch van aard, maar heeft wel een belangrijk gevolg voor de data-analist. De tibble is immers respectievelijk ‚Äúlui en nors‚Äù: er gebeurt minder automatisch (zoals het wijzigen van de namen en types van variabelen) en er komen sneller errors terug als output. Dat is een meerwaarde: het dwingt tot duidelijkere code en het vroeger oplossen van problemen. De functies in dit package kunnen een bestaand (ingelezen) object tot een tibble omvormen, of helpen bij het cre√´ren van een nieuwe tibble.\n\n\n\n\n\n\n\n\n\n\n\n\nFuncties uit het dplyr12-package zullen allicht het meest talrijk aanwezig zijn in de scripts van Team Data & Analyse, aangezien het package √©√©n of meerdere functies voorziet om elk van de fundamentele data-werkwoorden (cf.¬†volgende sectie) naar het script te vertalen. Deze data-werkwoorden zijn nodig om de ruwe gegevens te transformeren, afhankelijk van het doel van de verdere verwerking van die data (tot een visualisatie, tot een onderdeel van een model,‚Ä¶). Het transformeren heeft in de regel implicaties voor de inhoud van de data, omdat bijvoorbeeld:\n\nniet alle variabelen (kolommen) worden weerhouden voor verdere verwerking\nmaar met een deel van alle observaties (rijen) aan de slag wordt gegaan\nnieuwe kolommen worden gemaakt op basis (of in de plaats) van de originele\nrijen worden geaggregeerd, eventueel na een groepering\n‚Ä¶\n\nElk van deze data-werkwoorden volgen eenzelfde grammatica, waardoor het kennen van √©√©n functie helpt bij het leren van andere functies.\n\n\n\n\nOok tidyr13 bevat enkele belangrijke data-werkwoorden, zij het dan voor het herstructureren eerder dan transformeren van de gegevens14. Het subtiele verschil is dat er in geval van transformeren quasi altijd gegevens inhoudelijk veranderen, en mogelijk ook qua vorm. Bij herstructureren verandert in principe enkel de vorm, maar nooit de inhoud (tenzij in heel beperkte zin, zoals bij het omgaan met ontbrekende gegevens). Een wijziging in de vorm, zonder aan de inhoud te raken, gebeurt bijvoorbeeld omdat:\n\neen kolom over meerdere kolommen wordt uitgesplitst\ner wordt overgegaan naar meer rijen en minder kolommen (verlengen)\ner wordt overgegaan naar meer kolommen en minder rijen (verbreden)\ner met geneste (‚Äúhi√´rarchische‚Äù of ‚Äúgelaagde‚Äù) data aan de slag wordt gegaan\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\nAls dplyr de basis legt voor de transformatie van data aan de hand van (ver)werkwoorden die een gelijkaardige grammatica kennen, dan is ggplot215 de tegenhanger voor de visualisatie van data: een ‚Äúgrammar of graphics‚Äù16, waar tal van typische grafieken17, maar ook kaarten, op gelaagde wijze kunnen worden gegenereerd, met verregaande controle over de details.\n\n\n\n\nVan alle core-packages van de tidyverse, is purrr18 misschien wel de lastigste om te vatten, terwijl het tegelijk ook de deur opent voor heel wat effici√´ntie-winsten, waarvan ook de auteur op het moment van schrijven nog niet ten volle gebruik maakt. Bijgevolg is het ook niet eenvoudig om het bondig maar toch omvattend en correct toe te lichten19. Een belangrijke meerwaarde van purrr is dat het toelaat om iteratief aan de slag te gaan: √©√©n of meerdere functies worden systematisch toegepast op verschillende objecten, zonder dat lange code-kettingen telkens opnieuw moeten herhaald worden in een script (voor elk object apart). Dit kan in verschillende fasen van de analyse nuttig zijn:\n\nBij het inlezen van een reeks databestanden die allemaal min of meer dezelfde structuur delen, zonder dat ieder individueel bestand benoemd moet worden.\nBij het verwerken van data, waar de transformaties niet beperkt moeten blijven tot √©√©n tabel. Bijvoorbeeld: Kolommen die in meerdere analoge tabellen voorkomen (pakweg omdat elke tabel met √©√©n referentiejaar of √©√©n geografische eenheid overeenkomt), die je over alle varianten heen op eenzelfde manier wil transformeren, zonder ze eerst samen te moeten voegen. Een ander voorbeeld is starten met √©√©n tabel, of zelfs √©√©n losse kolom, waarbij de verwerking als effect heeft dat er meerdere tabellen worden aangemaakt20.\nBij het visualiseren van de verwerkte data, waarbij verschillende (filtraties van) tabellen elk apart -maar wel op analoge wijze- in een grafiek worden omgezet. Denk bijvoorbeeld aan een reeks bevolkingspiramides voor verschillende referentiejaren, een reeks kaarten voor elk van de gemeenten,‚Ä¶\nBij het exporteren van de verwerkte en/of gevisualiseerde data, in een reeks van bestanden (zoals excels en afbeeldingen).\n\n\n\n\n\n\n\n\n\n\n\n\n\nForcats21 is specifiek gericht op het werken met factoren: variabelen die een beperkt aantal waarden kunnen aannemen, en waar de waarden vaak een bepaalde onderlinge volgorde horen te hebben. Typische voorbeelden zijn schalen die in enqu√™tes voorkomen (‚Äúhelemaal niet eens‚Äù, ‚Äúeerder niet eens‚Äù, ‚Äúneutraal‚Äù, ‚Äúeerder eens‚Äù en ‚Äúhelemaal eens‚Äù) en scenario‚Äôs waarbij de volgorde een reflectie is van frequenties (zoals in een staafdiagram die tellingen per gemeente weergeeft, waar het handig is om de aantallen als basis te nemen voor de volgorde, eerder dan de gemeentenaam). Met het oog op visualisatie, is het vlot kunnen wijzigen van de rangorde (die in de meeste gevallen standaard alfabetisch is) noodzakelijk.\n\n\n\n\nStringr22 is dan weer gericht op het werken met ‚Äústrings‚Äù23: variabelen die quasi oneindig veel waarden kunnen aannemen, omdat het om -potentieel relatief lange- combinaties gaat van tal van karakters (letters, cijfers, spaties, leestekens,‚Ä¶) die vaak het resultaat zijn van tekstvelden. Niettegenstaande de enorme variatie, is het goed mogelijk dat er een bepaalde systematiek in de reeksen schuilgaat24, die kan uitgebuit worden voor het opknippen en verder opschonen van de data. Een andere toepassing is het het detecteren van specifieke sequenties (zoals bepaalde woorden of codes) in een ruimere reeks. Merk bovendien op dat het hierboven al gebruikte str_c(), voor het aan elkaar plakken van meerdere tekenreeksen tot een URL of pad, ook deel uitmaakt van stringr.\n\n\n\n\n\n\n\n\n\n\n\n\nLubridate25 is gericht op het werken met datums, al dan niet inclusief tijdsaanduidingen op niveau van uren, minuten en seconden. Het betreft zowel functies om datum en tijd correct te formatteren, als functies die helpen bij het rekenen met tijd. Met ‚Äúformatteren‚Äù wordt het correct interpreteren van datums bedoeld die in √©√©n kolom staan (denk bijvoorbeeld aan het verschil tussen Europa en Amerika: dd/mm/jjjj versus mm/dd/jjjj). Wat het rekenen met tijd betreft, wordt rekening gehouden met complexe aspecten zoals tijdzones en schrikkeldagen.\n\n\n\n\n\n\n\n\n\nBelangrijk\n\n\n\nIn de globale inhoudstafel worden package-namen gebruikt voor hoofdstukjes die ingaan op (sommige) functies die tot dat package behoren. Indien het om √©√©n van de bovenstaande packages gaat, wordt een asterisk (*) toegevoegd, om duidelijk te maken dat het over √©√©n van de spreekwoordelijke ‚Äúcentrale sterren‚Äù van het ‚Äútidy-universum‚Äù gaat. Een implicatie daarvan, is dat deze packages dus niet individueel geladen hoeven te worden, indien in dezelfde sessie de tidyverse al werd geladen.\n\n\n\n\n\nNette data als startpunt\nEr gaat vaak heel wat werk vooraf aan de eigenlijke analyse van √©√©n of meerdere datasets, omdat de analyse datasets vergt die (op een bepaalde manier) werden voorbereid, terwijl het de regel eerder dan de uitzondering is dat de data, zoals de analist ze ontvangt, niet onmiddellijk bruikbaar zijn. Het is bijvoorbeeld mogelijk dat een dataset werd geproduceerd opdat ze vlot werkbaar is in excel, en er vanuit menselijk oogpunt overzichtelijk en ‚Äúproper‚Äù uitziet, maar niet noodzakelijk de meest optimale vorm heeft voor verdere verwerking via scripts. Merk op dat in geval van excels die manueel worden bijgehouden (eerder dan dat er wordt gewerkt in een systeem waar excels uit ge√´xporteerd kunnen worden) er soms informatie verscholen zit, maar daardoor ook verloren raakt, in layout-elementen zoals de kleur van cellen. Hoewel dergelijke problemen zich niet voordoen in data die uit een systeem worden ge√´xporteerd, is het ook in die gevallen zelden zo dat de data zoals ze uit de systemen rollen rechtstreeks kunnen doorgeschakeld worden naar de code voor het genereren van een grafiek of voor het berekenen van statistieken.\nOm te kunnen starten aan de analyse is dus nette of ‚Äútidy‚Äù data nodig, die volgens Wickham (2014) de volgende kenmerken heeft:\n\nElke variabele vormt een kolom\nElke observatie vormt een rij.\nElke soort observationele eenheid komt overeen met een tabel.\n\nDe makkelijkste manier om elk van deze drie kenmerken te vatten, is het bekijken van cases waar Wickham (2014) het in veel gevallen ziet mislopen (met slordige of ‚Äúmessy‚Äù data tot gevolg).\n\nCase 1Case 2Case 3Case 4Case 5\n\n\nKolomtitels zijn zelf waarden van een variabele in plaats van namen voor variabelen.\n\n\n\n\n\n\n\n\n  \n    \n      Messy\n    \n    \n    \n      Jaar\n      Gemeente\n      0-inkomens\n      Inkomen 1 - 5.000 euro\n      Inkomen 5.001 - 10.000 euro\n    \n  \n  \n    2021\nAnderlecht\n11341\n11343\n13150\n    2021\nBrussel\n20392\n17426\n19546\n    2021\nElsene\n13165\n7862\n7329\n  \n  \n  \n\n\n\n\n\nDe observationele eenheid is in dit geval een inwoneraantal, en meer bepaald een aantal in een specifieke inkomensgroep uit een specifieke gemeente voor een specifiek jaar. Elke unieke combinatie van deze drie variabelen is met andere woorden op te vatten als √©√©n observatie, die haar eigen rij heeft. De betrokken variabelen, ook inkomensklasse, moeten dus elk in √©√©n kolom gevat worden.\n\n\n\n\n\n\n\n\n\n  \n    \n      Tidy\n    \n    \n    \n      Jaar\n      Gemeente\n      Inkomensklasse\n      Aantal inwoners\n    \n  \n  \n    2021\nAnderlecht\n0-inkomens\n11341\n    2021\nAnderlecht\nInkomen 1 - 5.000 euro\n11343\n    2021\nAnderlecht\nInkomen 5.001 - 10.000 euro\n13150\n    2021\nBrussel\n0-inkomens\n20392\n    2021\nBrussel\nInkomen 1 - 5.000 euro\n17426\n    2021\nBrussel\nInkomen 5.001 - 10.000 euro\n19546\n    2021\nElsene\n0-inkomens\n13165\n    2021\nElsene\nInkomen 1 - 5.000 euro\n7862\n    2021\nElsene\nInkomen 5.001 - 10.000 euro\n7329\n  \n  \n  \n\n\n\n\n\n\n\n\nKolommen die combinaties van meerdere variabelen bevatten.\n\n\n\n\n\n\n\n\n  \n    \n      Messy\n    \n    \n    \n      Jaar\n      Gemeente\n      Groep\n      Aantal Inwoners\n    \n  \n  \n    2023\nAnderlecht\nJongens 0-4 jaar\n4590\n    2023\nAnderlecht\nMeisjes 0-4 jaar\n4467\n    2023\nBrussel\nJongens 0-4 jaar\n5997\n    2023\nBrussel\nMeisjes 0-4 jaar\n5810\n    2023\nElsene\nJongens 0-4 jaar\n2073\n    2023\nElsene\nMeisjes 0-4 jaar\n2062\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      Tidy\n    \n    \n    \n      Jaar\n      Gemeente\n      Geslacht\n      Leeftijdsgroep\n      Aantal Inwoners\n    \n  \n  \n    2023\nAnderlecht\nJongens\n0-4 jaar\n4590\n    2023\nAnderlecht\nMeisjes\n0-4 jaar\n4467\n    2023\nBrussel\nJongens\n0-4 jaar\n5997\n    2023\nBrussel\nMeisjes\n0-4 jaar\n5810\n    2023\nElsene\nJongens\n0-4 jaar\n2073\n    2023\nElsene\nMeisjes\n0-4 jaar\n2062\n  \n  \n  \n\n\n\n\nIn de tidy tabel is er een extra kolom toegevoegd, om de ‚Äúgroep‚Äù in de messy tabel uit te splitsen in haar deelvariabelen (geslacht en leeftijd).\n\n\n\n\nVariabelen die zowel in rijen als kolommen opgeslagen zitten.\n\nMessyTidy\n\n\n\n\n\n\n\n\n  \n    \n      Gemeente\n      Vergunningstype\n      Tariefsysteem Opvanglocatie\n      Soort Plaats\n      2021\n      2022\n    \n  \n  \n    Jette\nGezinsopvang\nInkomenstarief\nInkomenstarief\n0\n0\n    Jette\nGezinsopvang\nInkomenstarief\nVrij tarief\nNA\nNA\n    Jette\nGezinsopvang\nMix\nInkomenstarief\n0\n37\n    Jette\nGezinsopvang\nMix\nVrij tarief\n0\n4\n    Jette\nGezinsopvang\nVrij tarief\nInkomenstarief\nNA\nNA\n    Jette\nGezinsopvang\nVrij tarief\nVrij tarief\n7\n0\n    Jette\nGroepsopvang\nInkomenstarief\nInkomenstarief\n270\n275\n    Jette\nGroepsopvang\nInkomenstarief\nVrij tarief\nNA\nNA\n    Jette\nGroepsopvang\nMix\nInkomenstarief\n37\n0\n    Jette\nGroepsopvang\nMix\nVrij tarief\n4\n0\n    Jette\nGroepsopvang\nVrij tarief \nInkomenstarief\nNA\nNA\n    Jette\nGroepsopvang\nVrij tarief\nVrij tarief\n56\n7\n  \n  \n  \n\n\n\n\nDe data is zodanig geordend dat er voor elk nieuw jaar een kolom wordt toegevoegd. Tegelijk wordt het aantal van een bepaalde soort kinderopvang-plaatsen (tarief wel/niet volgens inkomen) die in eenzelfde gemeente en in locaties met eenzelfde tariefsysteem en vergunningstype voorkomen, uitgesplitst over meerdere rijen. Het tariefsysteem van een opvanglocatie verwijst naar het systematisch aanbieden van √©√©n van de twee soorten plaatsen, of naar het beschikken over een mix van plaatsen waar ouders betalen volgens inkomen, en plaatsen waar ouders een door de cr√®che vrij gekozen tarief betalen. Aangezien het tariefsysteem in een specifieke rij wordt gecombineerd met de telling van √©√©n soort plaatsen, ontstaan er rijen met structureel lege cellen26. Immers: een opvanglocatie met een systeem waar alle plaatsen geprijsd worden afhankelijk van het inkomen, heeft per definitie geen plaatsen met een vrij tarief, en omgekeerd.\n\n\n\n\n\n\n\n\n  \n    \n      Gemeente\n      Jaar\n      Vergunningstype\n      Tariefsysteem Opvanglocatie\n      Inkomenstarief\n      Vrij tarief\n    \n  \n  \n    Jette\n2021\nGezinsopvang\nVrij tarief\n0\n7\n    Jette\n2021\nGroepsopvang\nInkomenstarief\n270\n0\n    Jette\n2021\nGroepsopvang\nMix\n37\n4\n    Jette\n2021\nGroepsopvang\nVrij tarief\n0\n56\n    Jette\n2022\nGezinsopvang\nMix\n37\n4\n    Jette\n2022\nGroepsopvang\nInkomenstarief\n275\n0\n    Jette\n2022\nGroepsopvang\nVrij tarief\n0\n7\n  \n  \n  \n\n\n\n\nIn de nette variant van de data, komt elke rij overeen met het geobserveerd aantal plaatsen volgens tarief, voor elke combinatie van gemeente, jaar, vergunningstype en tariefsysteem. Er zijn nog steeds gevallen aanwezig die logisch vreemd lijken (zoals het aantal plaatsen met inkomenstarief/met vrij tarief bij respectievelijk het vrij/inkomensafhankelijk systeem), maar deze nemen op zichzelf geen hele rij meer in beslag, en krijgen ook een betekenisvolle waarde (0).\nMerk op dat het dus niet verboden is om meerdere kolommen met deelaspecten van √©√©n observatie te hebben: we observeren een aantal plaatsen, maar dat (totaal) aantal plaatsen kunnen we opsplitsen in twee subgroepen (volgens tarief), die de observatie rijker maken. Wat cruciaal is, is dat de informatie op de juiste plaats in de data zit: een jaartal moet in de meeste gevallen sowieso in √©√©n kolom zitten wanneer we gaan visualiseren, omdat we √©√©n aspect van de grafiek (meestal de horizontale as) dan aan die ene kolom gaan koppelen. Voor andere gevallen is het niet altijd zwart-wit: om de onderlinge verhouding van de twee soorten plaatsen te berekenen, is het logisch dat ze op dezelfde rij in aparte kolommen staan, maar voor het visualiseren is het handiger om de berekende percentages nadien toch naar aparte rijen te op te splitsen. In dat geval beschouwen we een ander soort plaats ook expliciet als een aparte observatie. Wat tidy is, is dus ook afhankelijk van de doelstelling die de analist op dat moment heeft, en bijgevolg moet de analist ook vooruitdenken wanneer hij/zij beslissingen neemt bij de verwerking.\n\n\n\n\n\nMeerdere observationele eenheden in eenzelfde tabel.\n\nMessyTidy\n\n\n\n\n\n\n\n\n  \n    \n      Schooljaar\n      ID\n      InstellingsNaam\n      StraatNaamVP\n      HuisnummerVP\n      NaamFusiegemeenteVP\n      GraadSOOmschrijving\n      AantalLeerlingen\n    \n  \n  \n    2022-2023\n32144 -1\nSint-Jan Berchmanscollege\nUrsulinenstraat\n4\nBrussel\nEerste graad\n319\n    2022-2023\n32144 -1\nSint-Jan Berchmanscollege\nUrsulinenstraat\n4\nBrussel\nTweede graad\n252\n    2022-2023\n32144 -1\nSint-Jan Berchmanscollege\nUrsulinenstraat\n4\nBrussel\nDerde graad\n213\n    2022-2023\n41632 -1\nGO! atheneum Unescoschool Koekelberg\nKlein-Berchemstraat\n1\nKoekelberg\nEerste graad\n258\n    2022-2023\n41632 -1\nGO! atheneum Unescoschool Koekelberg\nKlein-Berchemstraat\n1\nKoekelberg\nTweede graad\n201\n    2022-2023\n41632 -1\nGO! atheneum Unescoschool Koekelberg\nKlein-Berchemstraat\n1\nKoekelberg\nDerde graad\n208\n    2022-2023\n41632 -5\nGO! atheneum Unescoschool Koekelberg\nF√©lix Vande Sandestraat\n11\nKoekelberg\nEerste graad\n255\n    2022-2023\n41632 -5\nGO! atheneum Unescoschool Koekelberg\nF√©lix Vande Sandestraat\n11\nKoekelberg\nTweede graad\n128\n  \n  \n  \n\n\n\n\nDe cijfers waarin we met name ge√Ønteresseerd zijn in dit voorbeeld, zitten rechts in de tabel: het aantal leerlingen per graad voor een specifieke (vestigingsplaats van een) school. De drie kolommen met adresgegevens worden telkens herhaald wanneer het om rijen van eenzelfde vestigingsplaats gaat, wat een indicatie is van informatie die op verschillende niveaus van observatie zit. E√©n niveau is dat de vestigingsplaats, een ander dat van een graad binnen een gegeven vestigingsplaats.\n\n\n\n\n\n\n\n\n  \n    \n      Vestigingsniveau\n    \n    \n    \n      ID\n      InstellingsNaam\n      StraatNaamVP\n      HuisnummerVP\n      NaamFusiegemeenteVP\n    \n  \n  \n    32144 -1\nSint-Jan Berchmanscollege\nUrsulinenstraat\n4\nBrussel\n    41632 -1\nGO! atheneum Unescoschool Koekelberg\nKlein-Berchemstraat\n1\nBrussel\n    41632 -5\nGO! atheneum Unescoschool Koekelberg\nF√©lix Vande Sandestraat\n11\nKoekelberg\n  \n  \n  \n\n\n\n\n\n\n\n\n  \n    \n      Graadniveau\n    \n    \n    \n      Schooljaar\n      ID\n      GraadSOOmschrijving\n      AantalLeerlingen\n    \n  \n  \n    2022-2023\n32144 -1\nEerste graad\n319\n    2022-2023\n32144 -1\nTweede graad\n252\n    2022-2023\n32144 -1\nDerde graad\n213\n    2022-2023\n41632 -1\nEerste graad\n258\n    2022-2023\n41632 -1\nTweede graad\n201\n    2022-2023\n41632 -1\nDerde graad\n208\n    2022-2023\n41632 -5\nEerste graad\n255\n    2022-2023\n41632 -5\nTweede graad\n128\n  \n  \n  \n\n\n\n\nDe niveaus van de vestigingsplaats en van de graden binnen vestigingsplaatsen krijgen elk hun eigen tabel, waardoor er geen nodeloze herhaling van informatie is. Merk op dat er wel een sleutelvariabele dient te zijn (in dit geval de ID-kolom) die ervoor zorgt dat elke rij in de vestigingen-tabel aan √©√©n of meer rijen in de graden-tabel kan gekoppeld worden. De sleutelvariabele moet bovendien goed gekozen zijn: als we hadden gekozen voor de naam van de overkoepelende instelling, dan was er adresinformatie verloren gegaan.\n\n\n\n\n\nE√©n observationele eenheid in meerdere tabellen.\n\n\n\n\n\n\n  \n    \n      Bron\n      ID\n      GraadSOOmschrijving\n      AantalLeerlingen\n    \n  \n  \n    Februaritelling_2020-2021.xlsx\n32144 -1\nEerste graad\n318\n    Februaritelling_2020-2021.xlsx\n32144 -1\nTweede graad\n274\n    Februaritelling_2020-2021.xlsx\n32144 -1\nDerde graad\n181\n    Februaritelling_2021-2022.xlsx\n32144 -1\nEerste graad\n316\n    Februaritelling_2021-2022.xlsx\n32144 -1\nTweede graad\n284\n    Februaritelling_2021-2022.xlsx\n32144 -1\nDerde graad\n194\n    Februaritelling_2022-2023.xlsx\n32144 -1\nEerste graad\n319\n    Februaritelling_2022-2023.xlsx\n32144 -1\nTweede graad\n252\n    Februaritelling_2022-2023.xlsx\n32144 -1\nDerde graad\n213\n  \n  \n  \n\n\n\n\nDit is het geval wanneer informatie in verschillende bestanden zit, maar in principe wel in √©√©n tabel thuishoren. Doorgaans heeft de uitsplitsing over meerdere bestanden praktische redenen, en is er een voor de hand liggende variabele die aan de basis van de uitsplitsing ligt. In het bovenstaand voorbeeld, is er dus een tabel die de combinatie is van verschillende excel-bestanden, die elk een deel van de rijen bevatten. De excel-bestanden zijn gesplitst per schooljaar, wat te maken heeft met het feit dat er jaarlijks een nieuw bestand wordt aangemaakt die de informatie van het voorgaande schooljaar bevat. Tijd is vaak een dimensie waarlangs bestanden worden gesplitst, maar in principe zijn er ook (combinaties van) andere variabelen mogelijk: een bestand per gemeente, per instelling, per onderwijsniveau,‚Ä¶\n\n\n\nDat data, zelfs indien ze afkomstig zijn van overheden, in de praktijk niet altijd netjes zijn, wordt mooi ge√Øllustreerd door McBain (2017) in een voorbeeld van het Australische statistiekbureau. Ook in Belgi√´, waar maar liefst vier offici√´le statistische autoriteiten zijn (√©√©n federaal27 en drie gewestelijke28) zijn tal van voorbeelden te vinden.\n\n\n\nFundamentele (ver)werkwoorden\nMaar hoe doe je dat dan, die verwerking van ‚Äúmessy‚Äù naar ‚Äútidy‚Äù data? Door toepassing van de juiste ‚Äúwerkwoorden‚Äù van de -taal! Wickham (2014) stelt dat heel wat van de problemen met een beperkt aantal werkwoorden kunnen opgelost worden, en verwijst daarbij naar de eerste vier in onderstaand lijstje. De auteur van deze documentatie vulde dit lijstje verder aan om alle fundamentele werkwoorden te capteren, of toch op z‚Äôn minst de werkwoorden die nagenoeg altijd nodig zijn in de scripts van Team Data & Analyse, en samen het merendeel van de script-gedeelten uitmaken die gericht zijn op het prepareren29 van de data.\nDaarnaast werden in onderstaand lijstje ook meteen √©√©n of meerdere tidyverse-functies aan elk werkwoord gekoppeld. Meer specifiek komen alle functies uit het dplyr-package, behalve de tidyr-functies in het laatste puntje. Merk op dat er nog heel veel andere functies zijn die dezelfde brede werkwoorden op eenzelfde of net op een andere manier in de praktijk brengen, binnen maar vooral ook buiten de tidyverse. Met het oog op consistent geschreven, en dus meer leesbare code, is het aangewezen om zoveel mogelijk tidyverse-functies te gebruiken, ook wanneer er alternatieven zijn in de standaard of ‚Äúbase‚Äù -code en/of in andere packages30.\n\nFilteren met filter(): Hiermee kies je specifieke rijen op basis van bepaalde voorwaarden.\nTransformeren met mutate(): Hiermee wijzig je kolommen en/of cre√´er je nieuwe kolommen, meestal op basis van de gegevens in bestaande kolommen.\nAggregeren met summarise(): Hiermee kun je statistische samenvattingen maken, zoals gemiddelden, totalen, aantallen, enzovoort.\nSorteren met arrange(): Hiermee kun je de volgorde van rijen aanpassen op basis van √©√©n of meer kolommen.\nGroeperen met group_by(): Hiermee kun je gegevens clusteren op basis van √©√©n of meer kolommen, waarna andere functies rekening houden met die clustering.\nSelecteren met select(): Hiermee kies je specifieke kolommen om te behouden in je dataset.\nCombineren met left_join(), right_join(), full_join(), inner_join() en bind_rows(): Deze functies voegen gegevens uit meerdere tabellen samen op basis van gemeenschappelijke kolommen. Joins voegen gegevens naast elkaar samen, terwijl de ‚Äúrijen-binding‚Äù gegevens onder elkaar plakt.\nHerstructureren met pivot_longer() en pivot_wider(): Deze functies helpen bij het omvormen van gegevens tussen brede en lange tabellen (‚Äúwide‚Äù en ‚Äúlong‚Äù formaat).\n\n\n\n\n‚ÄúCeci n‚Äôest pas une pipe‚Äù\nHet magrittr-package31 staat bekend om een specifieke ‚Äúpipe‚Äù-operator: %&gt;%, die je kan gebruiken wanneer de tidyerse geladen is32. Deze operator laat toe om verschillende functies aan elkaar te koppelen tot een code-ketting. Concreet gebeurt dit doordat het resultaat van datgene wat v√≥√≥r de operator staat, wordt beschouwd als eerste argument van de functie die na de operator staat. De twee regels code hieronder zijn bijgevolg equivalent aan elkaar:\n\nDataset_Brussel %&gt;% filter(Gemeente == \"Anderlecht\")\n\nfilter(Dataset_Brussel, Gemeente == \"Anderlecht\")\n\n\n\nDe eerste regel code zou je kunnen lezen als volgt: ‚Äúwe nemen de dataset met gegevens over Brussel, en dan filteren we de Gemeente-kolom zodat we enkele rijen overhouden van Anderlecht‚Äù. De tweede regel code is in dit geval minstens zo eenvoudig als de eerste, maar dat verandert snel wanneer we m√©√©r willen doen dan enkel √©√©n filtering. De %&gt;%-operator laat toe om een hele reeks van functies leesbaar achter elkaar te plaatsen (‚Ä¶ en dan ‚Ä¶ en daarna ‚Ä¶ en dan daarna ook nog ‚Ä¶), zonder dat dit veel extra complexiteit bijdraagt, die wel ontstaat als je niet zou kunnen rekenen op de operator.\n\n\n\n\n\n\nWe ontlenen hieronder enkele voorbeelden van Boehmke (z.d.) met de mtcars-dataset33, om dit te illustreren.\n\n\n\n\n\n\nTip\n\n\n\n\n\nLaat mtcars lopen om de data in de console te kunnen zien, of gebruik View(mtcars) om de data in een apart tabblad te openen. Met ?mtcars opent zich in het help-menu (meestal in het kwadrant rechts onderaan) wat metadata: een korte omschrijving van de (bron van) de data, waar vooral de precieze betekenis van elke kolom nodig is voor een goed begrip. Indien je de gegevens wil wijzigen, sla je de dataset best eerst op als een nieuw lokaal object in het werkgeheugen: ZelfGekozenNaam &lt;- mtcars.\n\n\n\n\nGeneste codeCode met veel objectenCode met de pipe-operator\n\n\nDeze stijl is wellicht het lastigst te ontcijferen, omdat er van ‚Äúbinnen naar buiten‚Äù moet worden gelezen. De dataset waar mee aan de slag wordt gegaan (mtcars), staat op de vierde regel, waar ook het eerst (ver)werkwoord te vinden is dat zal worden toegepast: een filtering op basis van de carb-kolom. Na de filtering gebeurt er een groepering (cf.¬†regel 3), op basis van de cyl-kolom (cf.¬†regel 5). Deze groepering is relevant voor de volgende verwerking, namelijk een samenvatting (cf.¬†regel 2), concreet door berekening van het gemiddelde van de mpg-kolom (cf.¬†regel 7). De laatste stap is het ordenen van de rijen (cf.¬†regel 1), concreet op basis van het berekende gemiddelde en bovendien aflopend (cf.¬†de kolom Avg_mpg, regel 9).\n\narrange(\n   summarize(\n       group_by(\n           filter(mtcars, carb &gt; 1),\n           cyl\n          ),\n       Avg_mpg = mean(mpg)\n      ),\n   desc(Avg_mpg)\n)\n\n# A tibble: 3 √ó 2\n    cyl Avg_mpg\n  &lt;dbl&gt;   &lt;dbl&gt;\n1     4    25.9\n2     6    19.7\n3     8    15.1\n\n\nDit is een heel eenvoudig voorbeeld met een viertal stappen, maar het is geen uitzondering om een dataset aan v√©√©l meer stappen te onderwerpen, waardoor er een escalatie is van de ‚Äúhaakjes in haakjes in haakjes‚Äù. Merk bovendien op dat je om elke individuele stap te begrijpen telkens moet springen tussen hoger en lager gelegen stukken van de code, waarbij de afstand tussen beiden ook steeds toeneemt naarmate je dichter komt bij de laatste stappen. Daarnaast vergt het ook wat van het werkgeheugen van de mens die de code schrijft en/of leest, om zich de resultaten van de eerste/centrale stappen te blijven voorstellen, waar dan de verdere/meer naar boven en onder gelegen stappen verder op ingrijpen.\n\n\nDeze stijl is al stukken leesbaarder dan de geneste code, omdat de stappen in de verwerking heel duidelijk te onderscheiden zijn, aangezien het resultaat van de stap in kwestie telkens als een apart object gedefinieerd staan. Het restulaat van de eerste stap (filtering van mtcars op basis van de carb-kolom) wordt opgslagen als object ‚Äòa‚Äô. Object ‚Äòb‚Äô wordt vervolgens gedefinieerd als een groepering van object ‚Äòa‚Äô. Objecten ‚Äòc‚Äô en ‚Äòd‚Äô zijn dan weer het resultaat van een functie die op respectievelijk ‚Äòb‚Äô en ‚Äòc‚Äô worden toegepast. In dit geval is ‚Äòd‚Äô het laatste resultaat, waar men allicht het meest in ge√Ønteresseerd is. Dat resultaat wordt dus getoond via de print()-functie, maar even goed is het mogelijk om de tussenliggende resultaten (a, b en c) in de verwerking van mtcars te bekijken, ter controle of ter verduidelijking wanneer de lezer zich niet de hele ketting kan voorstellen.\n\na &lt;- filter(mtcars, carb &gt; 1)\nb &lt;- group_by(a, cyl)\nc &lt;- summarise(b, Avg_mpg = mean(mpg))\nd &lt;- arrange(c, desc(Avg_mpg))\n\nprint(d)\n\n# A tibble: 3 √ó 2\n    cyl Avg_mpg\n  &lt;dbl&gt;   &lt;dbl&gt;\n1     4    25.9\n2     6    19.7\n3     8    15.1\n\n\nOpnieuw is er echter een steeds groter wordend probleem naarmate een verwerking meer stappen nodig heeft: het werkgeheugen (van de computer dit keer) wordt al snel ineffici√´nt gebruikt, aangezien de objecten die de resultaten van de verschillende stappen representeren, op enkele variaties na nodeloos veel gekopieerde data met zich meebrengt. Bovendien is het ook voor de mens die de code schrijft al snel niet evident om het overzicht over al die objecten te bewaren: voor je het weet wordt in een nieuwe stap per ongeluk aan de slag gegaan met het verkeerde object (bijvoorbeeld het voorlaatste resultaat, in plaats van het laatste).\nBovendien is het kiezen van een goede object-naam niet evident bij zoveel varianten, terwijl ook het werken met meer generieke namen (zoals ‚Äúa‚Äù, ‚Äúb‚Äù, ‚Äúc‚Äù of ‚Äústap1‚Äù, ‚Äústap2‚Äù, ‚Äústap3‚Äù) niet zonder gevaar is. Wanneer er een vergissing gebeurt in de volgorde van de stappen, is er veel meer werk om de code te herschrijven: de eerste stap wordt misschien plots stap 3, maar dat betekent ook dat stap 2 de nieuwe stap 1 wordt, en dat de oorspronkelijke stap 3 (nu stap 2) moet voortbouwen op stap 1 in plaats van op stap 2.\n\n\nMinstens zo leesbaar als de stijl met veel objecten: ‚Äúwe nemen mtcars en dan filteren we op de carb-kolom en dan groeperen we op basis van de cyl-kolom om daarna gemiddelden te berekenen van de mpg-kolom en daarna ook nog de resulterende rijen aflopend te ordenen op die gemiddelden‚Äù.\n\nmtcars %&gt;%\n  filter(carb &gt; 1) %&gt;%\n  group_by(cyl) %&gt;%\n  summarise(Avg_mpg = mean(mpg)) %&gt;%\n  arrange(desc(Avg_mpg))\n\n# A tibble: 3 √ó 2\n    cyl Avg_mpg\n  &lt;dbl&gt;   &lt;dbl&gt;\n1     4    25.9\n2     6    19.7\n3     8    15.1\n\n\nDe nadelen verbonden aan werken met veel objecten, zijn er echter niet of veel minder! Er worden veel minder variaties van de data als aparte objecten bijgehouden, waardoor er ook veel minder aandacht moet gaan naar het bewaren van het overzicht in (de namen van) al die objecten. Bovendien kan je bij de pipe-methode makkelijker stappen verschuiven zonder dat dit per definitie de code breekt (tenzij je stappen, die steunen op een nieuwe kolom, zou verschuiven naar een plaats in de ketting waar de defini√´ring van die kolom nog niet gebeurd is). Wil je een tussentijdse toestand van de data bekijken, ter controle of ter verduidelijking, dan is het mogelijk om eenvoudigweg maar een stuk van de code te laten lopen in de console. Let er bij het laten lopen van een stuk van een code-ketting wel op dat je de %&gt;% aan het einde van de regel tot waar je wil kijken niet meeneemt, want dat resulteert in een console die geduldig aan het wachten is op de volgende stappen, en dus nog geen output geeft.\n\n\n\n\n\n\nTip\n\n\n\n\n\nHeb je per ongeluk een stuk code aan de console overgedragen die eindigde op een %&gt;%, dan kan die console nogal koppig zijn in het interpreteren van alle volgende input als deel van een volgende stap, tenzij je met die input een error triggert. Het is daarom goed om weten dat je een lopende verwerking in de console kan onderbreken door de Escape-toets te gebruiken.\n\n\n\n\n\n\nMerk op dat werken met de pipe-operator versus de andere twee stijlen niet zwart/wit is. Zo is het vaak interessant om een lange verwerking van een dataset op te splitsen in enkele tussentijdse objecten, eerder dan alles in √©√©n enorme ketting te forceren. Ook werken met beperkt geneste code, bijvoorbeeld binnen een mutate(), kan de leesbaarheid net verhogen omdat het gebruik van de pipe dan gereserveerd kan blijven voor de hoofdlijn in de code-ketting, die tussen de mutate() en de vorige/volgende functies loopt. De insteek blijft echter om ‚Äúpipelines‚Äù te schrijven, maar tegelijk ook pragmatisch te zijn door hier en daar gericht nieuwe objecten en nesting toe te laten. De leesbaarheid van de code-ketting en het ruimere script is daarbij de maatstaf.\n\n\n\n\n\n\nTip\n\n\n\n\n\nEerder dan telkens de individuele karakters van de pipe-operator te schrijven, bestaat er een sneltoets, die de operator als geheel doet verschijnen, indien nodig inclusief √©√©n spatie voor en/of na die operator. Standaard is deze sneltoets ingesteld als Ctrl+Shift+M, al kan dit aangepast worden via ‚ÄúTools‚Äù in het lint helemaal bovenaan in RStudio. Er zijn nog tal van andere sneltoetsen, waarvan je een overzicht eveneens via ‚ÄúTools‚Äù kan raadplegen. Het overzicht van de sneltoesten kan je ook oproepen via Alt+Shift+K.\n\n\n\nTot nu toe verwezen we steeds naar %&gt;% als de pipe-operator, alsof het de enige pipe-operator is, wat niet klopt, om twee redenen:\n\nBinnen het magrittr-package bestaan er nog aanvullende maar minder gebruikte pipe-operatoren (%T&gt;%, %$% en %&lt;&gt;%), die nuttig kunnen zijn in specifieke gevallen, al heeft de auteur van deze documentatie er tot op heden geen gebruik van gemaakt. Voorbeelden van %&gt;% en andere pipe-operatoren in combinatie met enkele fundamentele tidyverse-functies als manier om dataverwerking zo gestroomlijnd mogelijk te maken, zijn te vinden in de blogpost ‚ÄòNavigating the Data Pipes: An R Programming Journey with Mario Bros.‚Äô (2024).\nDe %&gt;%-operator vormde voor velen een zodanige doorbraak voor de manier waarop heldere code kan geschreven worden, dat een alternatief werd voorzien in de standaard -code vanaf versie 4.1.0 (mei 2021): |&gt;, de zogenaamde native pipe. Het toont hoe ‚ÄúBase R‚Äù zelf ook nog wordt ontwikkeld34, niet zelden ge√Ønspireerd door innovaties vanuit de community.\n\n\n\n\n\n\n\nBelangrijk\n\n\n\nZoals toegelicht in de blogpost van Wickham (2023d) gedragen %&gt;% en |&gt; zich identiek in eenvoudige gevallen, wat voor de code geschreven door de auteur van deze documentatie neerkomt op alle gevallen, aangezien tot op heden geen gebruik werd gemaakt van de specifieke en meer gevorderde toepassingen van de originele magrittr-pipe. Toch is het goed om binnen een team over te schakelen op √©√©n van de pipes als standaard. De voorkeur gaat dan uit naar |&gt;, omdat er geen afhankelijkheid is van een extra package, en omdat het bewust werd beperkt tot de eenvoudige toepassingen. Indien er toch nood zou zijn voor de extra mogelijkheden, kan er uiteraard in die specifieke gevallen wel gekozen worden voor %&gt;%. Het is dan ook meteen duidelijk dat er ‚Äúiets speciaals‚Äù is, dat niet met de native pipe kan gedaan worden.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nMerk op dat je het gebruik van de native pipe kan instellen via de ‚ÄúGlobal Options‚Äù, onder ‚ÄúTools‚Äù in het lint helemaal bovenaan in RStudio. Indien ingesteld, zal |&gt; in plaats van %&gt;% worden gebruikt als resultaat van de pipe-sneltoest (Ctrl+Shift+M)."
  },
  {
    "objectID": "part_Introductie.html#de-fasen-van-een-data-project",
    "href": "part_Introductie.html#de-fasen-van-een-data-project",
    "title": "Introductie",
    "section": "De fasen van een data-project",
    "text": "De fasen van een data-project\nDe afbeelding hieronder ontlenen we van een artikel van Wickham e.a. (2019) over de tidyverse, maar is ook terug te vinden in de R for Data Science handboeken35, omdat het een nuttig kader is om een data-project didactisch in een cyclus met enkele fasen op te delen.\n\n\n\n\n\nDe kern van de analyse is de wisselwerking tussen transformeren, visualiseren en modelleren, om te komen tot begrip van en nieuwe inzichten in de data (cf.¬†‚ÄúUnderstand‚Äù).\n\nImportTidyTransformVisualiseModelCommunicate\n\n\nImport verwijst naar het inladen van de data in RStudio, wat soms meer voeten in de aarde heeft dan je zou denken, omdat data op verschillende plaatsen kan staan (bijvoorbeeld lokaal versus op internet) en in verschillende formaten kan opgeslagen staan (vaak excel- of csv-bestanden, maar ook json-bestanden, shapefiles,‚Ä¶).\n\n\nTidy verwijst naar het komen tot nette data, als startpunt van de eigenlijke analyse, zoals toegelicht in een vorige sectie.\n\n\nTransform verwijst naar het dieper graven in de tidy data, door in te zoomen op een specifieke set rijen en/of kolommen, door de gegevens te verrijken via berekeningen of integratie met aanvullende datasets, en door de data te aggregeren om patronen te helpen vaststellen. Het transformeren gebeurt vaak met een bepaalde visualisatie of een bepaald model voor ogen, die specifieke gegevens in een specifieke (al dan niet geaggregeerde) vorm nodig hebben.\n\n\nVisualise verwijst naar het visueel voorstellen van het verband tussen aspecten van de data, door kolommen te koppelen aan de grafische elementen in een grafiek. Het visualiseren is een heel menselijke activiteit: de juiste kolommen koppelen aan de juiste elementen om verbanden in beeld te brengen die je verwacht (of net niet verwacht!) vergen immers creatief denken. Bij heel nieuwe data is het ook geen uitzondering dat het komen tot een inzichtelijke grafiek heel wat vallen en opstaan is voorafgegaan. Een grafiek kan op zichzelf heel waardevol zijn als bron van kennis, maar kan ook helpen bij het komen tot scherp(er) geformuleerde onderzoeksvragen, die aan de basis liggen van modellen.\n\n\nModel verwijst naar het mathematisch benaderen van de verbanden tussen aspecten van de data, en eventueel het maken van voorspellingen die verder gaan dan de observaties die al in de data zitten. Er wordt gebruik gemaakt van statistische procedures die -eens gekozen door de data-analist en aangevuld met de juiste parameters- door de computer worden uitgevoerd. Er is met andere woorden veel minder sprake van menselijke creativiteit en exploratie met modellen, maar eerder van het bevestigen of net weerleggen van precies geformuleerde hypotheses, waar de data een antwoord op kan helpen leveren. De mathematische benadering is als bron van kennis dus complementair aan de grafische benadering.\n\n\nCommunicate verwijst naar het overdragen van het begrip van en de inzichten in de data. De overgedragen kan verschillende vormen van informatie bevatten, afhankelijk van hoe uitgebreid en (technisch) gedetailleerd er wordt gecommuniceerd: grafieken, tabellen, narratieve toelichting van de bevindingen, resultaten van een model, -code gebruikt in de analyse,‚Ä¶ Het Quarto¬Æ-publicatiesysteem, dat sinds versie 2022.07 standaard deel uitmaakt van RStudio, is hier een krachtig instrument voor, wat hopelijk ook uit deze documentatie blijkt.\n\n\n\nOp de hele cyclus, van importeren tot communiceren, heeft de data-analist bovendien ook de taak om processen waar nodig en mogelijk te automatiseren, aan de hand van zelf geschreven functies, met het oog op meer effici√´ntie (cf.¬†‚ÄúProgram‚Äù).\n\nDe cyclus van een data-project is niet alleen didactisch interessant om de taken van een data-analist te duiden, maar ook de instrumenten die hij/zij daarvoor nodig heeft, bijvoorbeeld door toevoeging van de tidyverse core-packages, zoals op onderstaande afbeelding van √áetinkaya-Rundel (2023).\n\n\n\n\n\nZoals al gezegd in het welkomstwoord, laten we ons voor de structuur van deze documentatie inspireren door de cyclus van een data-project, en het inhaken van packages op de fases in die cyclus. Toch zijn er enkele verschillen, ten opzichte van de bovenstaande afbeeldingen:\n\nWe beperken ons niet tot de tidyverse core-packages, aangezien Team Data & Analyse ook aanvullend van andere packages gebruik maakt, en er wordt gestreefd naar een zo volledig mogelijk overzicht.\nNaast breed moet het overzicht ook diepgaand zijn: de packages zijn na de fase een eerste niveau van verdieping in de inhoudstafel, maar daaronder worden ook specifieke veelgebruikte functies opgenomen.\nGeen onderscheid tussen Tidy en Transform, aangezien dat in de praktijk niet altijd even duidelijk is. Bijgevolg is ook het koppelen van packages, laat staan van specifieke functies, aan √©√©n van beiden soms een kwestie van interpretatie (cf.¬†tidyr en purrr die op de bovenstaande afbeelding aan beide fases worden gekoppeld). In de plaats daarvan gebruiken we ‚ÄúWRANGLE‚Äù36 als term die naar beide fases verwijst, naar het voorbeeld van de R for Data Science handboeken.\nNiet alle taken in de cyclus worden (even uitgebreid) opgenomen, omdat sommige taken heel wat meer toelichting vergen dan louter en alleen een behandeling van specifieke functies in bestaande pacakges. Om die reden vallen Model, Program (tenzij via purrr) en Communicate37 momenteel buiten de scope. Er wordt wel een Export-onderdeel voorzien, om de functies te capteren die helpen bij het lokaal opslaan van grafieken (als .png, .pdf, .svg,‚Ä¶) en data (meestal als .xlsx). Conceptueel zou je het exporteren kunnen zien als een heel klein stukje van het werk nodig voor het communiceren over de analyse.\n\n\n\n\n\n\n\n\n\n\n\n\n\nBache, Stefan Milton, en Hadley Wickham. 2022. magrittr: A Forward-Pipe Operator for R. https://magrittr.tidyverse.org.\n\n\nBoehmke, Bradley. z.d. ‚ÄòSimplify Your Code with %&gt;%‚Äô. UC Business Analytics R Programming Guide. https://uc-r.github.io/pipe.\n\n\n√áetinkaya-Rundel, Mine. 2023. ‚ÄòTeaching the tidyverse in 2023‚Äô. https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/.\n\n\nChan, Martin. 2020. ‚ÄòRStudio Projects and Working Directories: A Beginner‚Äôs Guide‚Äô. Musings on R. https://martinctc.github.io/blog/rstudio-projects-and-working-directories-a-beginner‚Äôs-guide/.\n\n\nGrolemund, Garrett, en Hadley Wickham. 2011. ‚ÄòDates and Times Made Easy with lubridate‚Äô. Journal of Statistical Software 40 (3): 1‚Äì25. https://doi.org/10.18637/jss.v040.i03.\n\n\nIsmay, Chester, en Albert Y. Kim. 2019. Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. 1ste dr. Chapman; Hall/CRC. https://moderndive.com/index.html.\n\n\nMcBain, Miles. 2017. ‚ÄòTidying the Australian Same Sex Marriage Postal Survey Data with R‚Äô. https://medium.com/@miles.mcbain/tidying-the-australian-same-sex-marriage-postal-survey-data-with-r-5d35cea07962.\n\n\nM√ºller, Kirill, en Hadley Wickham. 2023. tibble: Simple Data Frames. https://tibble.tidyverse.org/.\n\n\n‚ÄòNavigating the Data Pipes: An R Programming Journey with Mario Bros.‚Äô 2024. Numbers around us. https://medium.com/number-around-us/navigating-the-data-pipes-an-r-programming-journey-with-mario-bros-1aa621af1926.\n\n\nWickham, Hadley. 2014. ‚ÄòTidy Data‚Äô. Journal of Statistical Software 59 (10): 1‚Äì23. https://doi.org/10.18637/jss.v059.i10.\n\n\n‚Äî‚Äî‚Äî. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n‚Äî‚Äî‚Äî. 2018. ‚Äòconflicted: a new approach to resolving ambiguity‚Äô. https://www.tidyverse.org/blog/2018/06/conflicted/.\n\n\n‚Äî‚Äî‚Äî. 2023a. conflicted: An Alternative Conflict Resolution Strategy. https://conflicted.r-lib.org/.\n\n\n‚Äî‚Äî‚Äî. 2023b. forcats: Tools for Working with Categorical Variables (Factors). https://forcats.tidyverse.org/.\n\n\n‚Äî‚Äî‚Äî. 2023c. stringr: Simple, Consistent Wrappers for Common String Operations. https://stringr.tidyverse.org.\n\n\n‚Äî‚Äî‚Äî. 2023d. ‚ÄòDifferences between the base R and magrittr pipes‚Äô. https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D‚ÄôAgostino McGowan, Romain Fran√ßois, Garrett Grolemund, e.a. 2019. ‚ÄòWelcome to the Tidyverse‚Äô. https://tidyverse.tidyverse.org/articles/paper.html.\n\n\nWickham, Hadley, Mine √áetinkaya-rundel, en Garrett Grolemund. 2023. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 2de dr. O‚ÄôReilly Media. https://r4ds.hadley.nz/.\n\n\nWickham, Hadley, Romain Fran√ßois, Lionel Henry, Kirill M√ºller, en Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://dplyr.tidyverse.org.\n\n\nWickham, Hadley, en Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1ste dr. O‚ÄôReilly. https://r4ds.had.co.nz/index.html.\n\n\nWickham, Hadley, en Lionel Henry. 2023. purrr: Functional Programming Tools. https://purrr.tidyverse.org/.\n\n\nWickham, Hadley, Jim Hester, en Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://readr.tidyverse.org.\n\n\nWickham, Hadley, Davis Vaughan, en Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://tidyr.tidyverse.org."
  },
  {
    "objectID": "part_Introductie.html#footnotes",
    "href": "part_Introductie.html#footnotes",
    "title": "Introductie",
    "section": "",
    "text": "In de meeste gevallen maakt Team Data & Analyse gebruik van packages die beschikbaar zijn via CRAN (The Comprehensive R Archive Network).‚Ü©Ô∏é\nZie het tabblad ‚Äúpackages‚Äù, in het kwadrant rechts onderaan.‚Ü©Ô∏é\nMeer nog: het is mogelijk dat de schrijver zich niet realiseert dat er meerdere mogelijkheden zijn, en dan bestaat de kans dat er per ongeluk een verkeerde variant van de functie wordt genomen. Het conflicted-package van Wickham (2023a) kan hier interessant zijn: zoals uitgelegd door Wickham (2018), laadt het zelf geen extra functies, maar geeft het een error wanneer een dubbelzinnige functie gebruikt, zodat je wordt gedwongen om een expliciete keuze te maken.‚Ü©Ô∏é\nZie de blogpost van Chan (2020) voor een heldere uitleg voor beginners over RStudio projecten.‚Ü©Ô∏é\nEnkel de shapefiles met alle Brusselse adrespunten nemen bijvoorbeeld al ruim 100 MB in beslag.‚Ü©Ô∏é\nHet alternatief zou zijn dat alle scripts voor de verwerking van de gevoelige gegevens bij die gevoelige gegevens zou komen te staan, en dat het resultaat van die verwerking wordt ge√´xporteerd en naar de projectmap wordt gekopieerd. Dat is echter niet te verkiezen: er is meer risico dat het kopie, wat meestal een tussentijds product is, toch nog gevoelige informatie bevat die er tegen het eindresultaat uit zou zijn. Daarnaast bestaat de kans dat het artificieel uitsplitsen van een verwerking in meerdere scripts zorgt voor het ontstaan van inconsistentie tussen de scripts, na verloop van tijd.‚Ü©Ô∏é\nZoals we ook verderop zullen zien, proberen we werkruimten diep in de mappenstructuur te vermijden, zeker wanneer het gaat om gedeelde scripts en werkruimten die op SharePoint staan (via de OneDrive). Echter: het is niet uitgesloten dat toch wordt gewerkt in/met √©√©n of meerdere lokale mappen (of mappen in de persoonlijke OneDrive), bijvoorbeeld in het kader van vroeg experimenteerwerk of een individueel leertraject, waar er veel ‚Äúmappen in mappen in mappen‚Äù kunnen zijn.‚Ü©Ô∏é\nIn combinatie met goede afspraken, kan een dergelijke afscheiding helpen om accidentele wijzigingen aan databestanden door de collega‚Äôs (wat zoals reeds gezegd gevolgen kan hebben op de scripts) te voorkomen, indien er breder toegang gegeven wordt tot de projectmap. G√©√©n toegang geven indien dat niet nodig is, is natuurlijk het veiligst, maar moet afgewogen worden tegen de voordelen van w√©l toegang geven (vlot output-bestanden delen, samenwerken aan een eindproduct waar de analyse maar een onderdeel van is) en het belang van transparantie.‚Ü©Ô∏é\nHoewel tidyverse-code doorgaans snel verwerkt wordt door de computer, zijn er wellicht manieren om met minder rekentijd tot hetzelfde resultaat te komen. De verwerking van de code voor mensen komt dus met een prijs, aangezien er niet meer zuiver voor de verwerking door de computer wordt geoptimaliseerd. Die kost is echter m√©√©r dan de moeite waard, aangezien het de plicht van de data-analist is om zijn/haar werk zo transparant mogelijk te documenteren, wat veel vlotter gaat met tidyverse-code dan met standaard -code.‚Ü©Ô∏é\nWickham, Hester, en Bryan (2024)‚Ü©Ô∏é\nM√ºller en Wickham (2023)‚Ü©Ô∏é\nWickham e.a. (2023)‚Ü©Ô∏é\nWickham, Vaughan, en Girlich (2024)‚Ü©Ô∏é\nIn theorie gaat het herstructureren (tidyr) vooraf aan het meer inhoudelijke transformeren (dplyr), maar in de praktijk is het zeker geen uitzondering dat er flexibel geschakeld wordt tussen functies van beide (en andere) packages, afhankelijk van wat nodig is voor de gegevens om ze, met een bepaald resultaat voor ogen, inhoudelijk te focussen en in √©√©n of andere vorm te krijgen.‚Ü©Ô∏é\nWickham (2016)‚Ü©Ô∏é\nEen verwijzing naar de titel van het boek dat als inspiratie voor ggplot diende.‚Ü©Ô∏é\nHistogrammen, staaf-, taart- en lijndiagrammen, scatter- en boxplots,‚Ä¶‚Ü©Ô∏é\nWickham en Henry (2023)‚Ü©Ô∏é\nEen kleine anekdote, is dat de auteur √©√©n van zijn eerste echte AI-conversaties had over het purrrr-codepakket, op zoek naar inspiratie om dit stukje van de inleiding te stofferen.‚Ü©Ô∏é\nZoals bij het uitlezen van een API! De kolom in kwestie bevat dan een URL die verschilt van rij tot rij, en de verwerking bestaat erin dat de URLS √©√©n voor √©√©n worden geraadpleegd, en dat de data die daar te vinden is, wordt opgehaald. Elk rij kan dus aanleiding geven tot een nieuwe tabel, waardoor het resultaat niet zomaar √©√©n-op-√©√©n aan de oorspronkelijke kolom kan worden geplakt.‚Ü©Ô∏é\nWickham (2023b)‚Ü©Ô∏é\nWickham (2023c)‚Ü©Ô∏é\nHet gaat om het Engelse woord voor ‚Äútekenreeksen‚Äù, niet om het ondergoed üòâ.‚Ü©Ô∏é\nDenk bijvoorbeeld aan adressen!‚Ü©Ô∏é\nGrolemund en Wickham (2011)‚Ü©Ô∏é\nIn R krijgen strikt lege cellen automatisch de speciale waarde NA toegekend, wat staat voor ‚ÄúNot Available‚Äù. De bedoeling van de NA is het signaleren van ontbrekende waarden, omdat die niet zelden een impact (moeten) hebben op de verdere verwerking. Bijvoorbeeld: een NA die voorkomt in een kolom met numerieke waarden waar een gemiddelde van berekend wordt, zal automatisch NA als resultaat veroorzaken, tenzij er expliciet wordt aangegeven dat de NA dient genegeerd te worden bij het berekenen van dat gemiddelde. De achterliggende logica is dat hoewel de waarde ontbreekt in onze tabel, ze mogelijk wel bestaat in de realiteit, en het gemiddelde mee zou be√Ønvloed hebben, maar op een manier die we niet kennen. Merk bovendien op dat een cel leeg kan lijken vanuit menselijke blik, maar het misschien toch niet is voor de computer, bijvoorbeeld in geval van een string zonder inhoud (de reeks karakters, afgebakend door aanhalingstekens, is met andere woorden in sommige gevallen leeg: ‚Äú‚Äú).‚Ü©Ô∏é\nStatbel‚Ü©Ô∏é\nDe Vlaamse Statistische Autoriteit of VSA, het Brussels Instituut voor Statistiek en Analyse of BISA en l‚Äôinstitut Wallon de l‚Äô√©valuation, de la prospective el de la statistique of IWEPS.‚Ü©Ô∏é\nDe script-gedeelten gericht op preparatie gaan vooraf aan onder andere de script-gedeelten die gericht zijn op het visualiseren van de data, die dan weer uit andere functies opgebouwd zijn.‚Ü©Ô∏é\n‚ÄúCombineren‚Äù kan bijvoorbeeld ook met merge() en rbind(), wat standaard -functies zijn.‚Ü©Ô∏é\nBache en Wickham (2022)‚Ü©Ô∏é\nLet op: magrittr maakt geen deel uit van de core-packages, en wordt dus niet integraal meegeladen wanneer library(tidyverse) wordt uitgevoerd. Echter: bij het laden van de tidyverse, of specifieke packages zoals dplyr, wordt heel gericht ook de %&gt;%-operator ge√Ømporteerd, zodat de pipe toch kan gebruikt worden zonder het volledige magrittr-package te laden. Omwille van die afhankelijkheid, zorgt install.packages(tidyverse) automatisch voor het bijkomend installeren van magrittr.‚Ü©Ô∏é\nHet object mtcarsis √©√©n van de datasets die standaard deel uitmaken van , met als doel om alle gebruikers van de software te voorzien van dezelfde voorbeeld-data, zonder dat er aparte bestanden met die data moeten worden verspreid, gedownload en ingeladen. Wanneer gebruikers, bijvoorbeeld op populaire platformen zoals stackoverflow elkaar vragen stellen over concrete stukken code, kunnen dergelijke datasets helpen om het probleem te schetsen en een oplossing te formuleren (die de vraagsteller dan kan vertalen naar de dataset waar hij/zij vastliep). Ook wanneer een code-vraag wordt gesteld aan AI, kan je suggereren om voor de voorbeelden een standaard-dataset te gebruiken, om te vermijden dat je √©chte data deelt met de AI, en dus met de (eigenaars van de) servers die de AI doen werken.‚Ü©Ô∏é\nOntwikkelingen gebeuren door het R Core Team, dat schrijfrechten op de broncode van R heeft, ondersteund door tal van andere bijdragers.‚Ü©Ô∏é\nZie Wickham en Grolemund (2017) voor editie 1 en Wickham, √áetinkaya-rundel, en Grolemund (2023) voor editie 2.‚Ü©Ô∏é\n‚ÄúWrangling‚Äù kan afhankelijk van de bron vertaald worden als ‚Äúruziemaken‚Äù en ‚Äúkibbelen‚Äù, maar ook als ‚Äúwurmen‚Äù en ‚Äúwringen‚Äù of zelfs ‚Äúworstelen‚Äù. Het sluit aan bij het gevoel dat de data-analist die aan de slag is kan hebben, wanneer hij/zij de data in de juiste vorm probeert te krijgen om te kunnen gebruiken in een grafiek of model. In de introductie van R for Data Science, verwoorden Wickham, √áetinkaya-rundel, en Grolemund (2023) het als volgt: ‚ÄúTogether, tidying and transforming are called wrangling because getting your data in a form that‚Äôs natural to work with often feels like a fight!‚Äù.‚Ü©Ô∏é\nVoor Quarto¬Æ is er al zeer uitgebreide documentatie van de ontwikkelaars zelf beschikbaar.‚Ü©Ô∏é"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliografie",
    "section": "",
    "text": "Bache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A\nForward-Pipe Operator for r. https://magrittr.tidyverse.org.\n\n\nBoehmke, Bradley. n.d. ‚ÄúSimplify Your Code with %&gt;%.‚Äù\nUC Business Analytics R Programming Guide. https://uc-r.github.io/pipe.\n\n\n√áetinkaya-Rundel, Mine. 2023. ‚ÄúTeaching the Tidyverse in\n2023.‚Äù https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/.\n\n\nChan, Martin. 2020. ‚ÄúRStudio Projects and Working Directories: A\nBeginner‚Äôs Guide.‚Äù Musings on R. https://martinctc.github.io/blog/rstudio-projects-and-working-directories-a-beginner‚Äôs-guide/.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. ‚ÄúDates and Times\nMade Easy with lubridate.‚Äù\nJournal of Statistical Software 40 (3): 1‚Äì25. https://doi.org/10.18637/jss.v040.i03.\n\n\nIsmay, Chester, and Albert Y. Kim. 2019. Statistical Inference via\nData Science: A ModernDive into r and the Tidyverse. 1st ed.\nChapman; Hall/CRC. https://moderndive.com/index.html.\n\n\nMcBain, Miles. 2017. ‚ÄúTidying the Australian Same Sex Marriage\nPostal Survey Data with r.‚Äù https://medium.com/@miles.mcbain/tidying-the-australian-same-sex-marriage-postal-survey-data-with-r-5d35cea07962.\n\n\nM√ºller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data\nFrames. https://tibble.tidyverse.org/.\n\n\n‚ÄúNavigating the Data Pipes: An r Programming Journey with Mario\nBros.‚Äù 2024. Numbers Around Us. https://medium.com/number-around-us/navigating-the-data-pipes-an-r-programming-journey-with-mario-bros-1aa621af1926.\n\n\nWickham, Hadley. 2014. ‚ÄúTidy Data.‚Äù Journal of\nStatistical Software 59 (10): 1‚Äì23. https://doi.org/10.18637/jss.v059.i10.\n\n\n‚Äî‚Äî‚Äî. 2016. Ggplot2: Elegant Graphics for Data Analysis.\nSpringer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n‚Äî‚Äî‚Äî. 2018. ‚ÄúConflicted: A New Approach to Resolving\nAmbiguity.‚Äù https://www.tidyverse.org/blog/2018/06/conflicted/.\n\n\n‚Äî‚Äî‚Äî. 2023a. Conflicted: An Alternative Conflict Resolution\nStrategy. https://conflicted.r-lib.org/.\n\n\n‚Äî‚Äî‚Äî. 2023b. Forcats: Tools for Working with Categorical Variables\n(Factors). https://forcats.tidyverse.org/.\n\n\n‚Äî‚Äî‚Äî. 2023c. Stringr: Simple, Consistent Wrappers for Common String\nOperations. https://stringr.tidyverse.org.\n\n\n‚Äî‚Äî‚Äî. 2023d. ‚ÄúDifferences Between the Base r and Magrittr\nPipes.‚Äù https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nD‚ÄôAgostino McGowan, Romain Fran√ßois, Garrett Grolemund, et al. 2019.\n‚ÄúWelcome to the Tidyverse.‚Äù https://tidyverse.tidyverse.org/articles/paper.html.\n\n\nWickham, Hadley, Mine √áetinkaya-rundel, and Garrett Grolemund. 2023.\nR for Data Science: Import, Tidy, Transform, Visualize, and Model\nData. 2nd ed. O‚ÄôReilly Media. https://r4ds.hadley.nz/.\n\n\nWickham, Hadley, Romain Fran√ßois, Lionel Henry, Kirill M√ºller, and Davis\nVaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://dplyr.tidyverse.org.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science:\nImport, Tidy, Transform, Visualize, and Model Data. 1st ed.\nO‚ÄôReilly. https://r4ds.had.co.nz/index.html.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional\nProgramming Tools. https://purrr.tidyverse.org/.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read\nRectangular Text Data. https://readr.tidyverse.org.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr:\nTidy Messy Data. https://tidyr.tidyverse.org."
  }
]